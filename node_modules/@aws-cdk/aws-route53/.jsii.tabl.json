{
  "version": "2",
  "toolVersion": "1.55.1",
  "snippets": {
    "f5c52d35c47f05643976ae51790c88ce720757d89f6089dacd3bbcbbd8b0655d": {
      "translations": {
        "python": {
          "source": "route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "route53.NewPublicHostedZone(this, jsii.String(\"HostedZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"fully.qualified.domain.com\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "eb2b3a4215012305d42a2d31356962bc7976e0329d3ed323f1df04c492a4d286"
    },
    "44b7e4cc5ada0fe26a7eb15501d431f36b51df57acbb2c4d041bfe92ad3fae6a": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nzone = route53.PrivateHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\",\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = new PrivateHostedZone(this, \"HostedZone\", new PrivateHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = PrivateHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nzone := route53.NewPrivateHostedZone(this, jsii.String(\"HostedZone\"), &privateHostedZoneProps{\n\tzoneName: jsii.String(\"fully.qualified.domain.com\"),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 26
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-route53.PrivateHostedZone",
        "@aws-cdk/aws-route53.PrivateHostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a86dc9cd1e6760178afa364f0c0546f7083074892c67c0b15a0d3a86a4b160a3"
    },
    "3da5b4161e6fea19506fd53bbc7484096932267c3a6a04e4b4ccc9f1ad033c0b": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.TxtRecord(self, \"TXTRecord\",\n    zone=my_zone,\n    record_name=\"_foo\",  # If the name ends with a \".\", it will be used as-is;\n    # if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    # otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    # Defaults to zone root if not specified.\n    values=[\"Bar!\", \"Baz?\"],\n    ttl=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew TxtRecord(this, \"TXTRecord\", new TxtRecordProps {\n    Zone = myZone,\n    RecordName = \"_foo\",  // If the name ends with a \".\", it will be used as-is;\n    // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    // Defaults to zone root if not specified.\n    Values = new [] { \"Bar!\", \"Baz?\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nTxtRecord.Builder.create(this, \"TXTRecord\")\n        .zone(myZone)\n        .recordName(\"_foo\") // If the name ends with a \".\", it will be used as-is;\n        // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n        // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n        // Defaults to zone root if not specified.\n        .values(List.of(\"Bar!\", \"Baz?\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewTxtRecord(this, jsii.String(\"TXTRecord\"), &txtRecordProps{\n\tzone: myZone,\n\trecordName: jsii.String(\"_foo\"),\n\t // If the name ends with a \".\", it will be used as-is;\n\t// if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n\t// otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n\t// Defaults to zone root if not specified.\n\tvalues: []*string{\n\t\tjsii.String(\"Bar!\"),\n\t\tjsii.String(\"Baz?\"),\n\t},\n\tttl: duration.minutes(jsii.Number(90)),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 41
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.TxtRecord",
        "@aws-cdk/aws-route53.TxtRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "74e51c69b266f48925d8c5938d63f03c7f338f782eabdd3c45a12a159e8e4039"
    },
    "5591aba5382e8dd8361a206628ff2d897c64cfebe3ef8998b928e058168bed1c": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.NsRecord(self, \"NSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew NsRecord(this, \"NSRecord\", new NsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nNsRecord.Builder.create(this, \"NSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewNsRecord(this, jsii.String(\"NSRecord\"), &nsRecordProps{\n\tzone: myZone,\n\trecordName: jsii.String(\"foo\"),\n\tvalues: []*string{\n\t\tjsii.String(\"ns-1.awsdns.co.uk.\"),\n\t\tjsii.String(\"ns-2.awsdns.com.\"),\n\t},\n\tttl: duration.minutes(jsii.Number(90)),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 60
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.NsRecord",
        "@aws-cdk/aws-route53.NsRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7ab2a5ca45b8a7458f283ba402891e156091588aa4222d162fa817e5cd039629"
    },
    "adc8480f9bd145ba3af2564093018f93893404762c4421e2e795120e9ff9b34d": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.DsRecord(self, \"DSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"12345 3 1 123456789abcdef67890123456789abcdef67890\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew DsRecord(this, \"DSRecord\", new DsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"12345 3 1 123456789abcdef67890123456789abcdef67890\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nDsRecord.Builder.create(this, \"DSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewDsRecord(this, jsii.String(\"DSRecord\"), &dsRecordProps{\n\tzone: myZone,\n\trecordName: jsii.String(\"foo\"),\n\tvalues: []*string{\n\t\tjsii.String(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"),\n\t},\n\tttl: duration.minutes(jsii.Number(90)),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 76
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.DsRecord",
        "@aws-cdk/aws-route53.DsRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "184040bfbcdc34705ad8615c6683c3b7a47b796367cfbeafb4e3489a5a5ec19d"
    },
    "cb4a4082f6230ab9e8e53dddb5577598a2a3a3ad50f5ec760e2e4ae3e955ca2d": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(\"1.2.3.4\", \"5.6.7.8\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(\"1.2.3.4\", \"5.6.7.8\")\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(\"1.2.3.4\", \"5.6.7.8\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewARecord(this, jsii.String(\"ARecord\"), &aRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromIpAddresses(jsii.String(\"1.2.3.4\"), jsii.String(\"5.6.7.8\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses('1.2.3.4', '5.6.7.8'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses('1.2.3.4', '5.6.7.8'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "794074f0c9343e0639f3221398bf83f88cc15d6479b879446bf9b7c1ac94376a"
    },
    "123bfbf6b812c08ae0bf1ae5fecabcd4095055bd480989e747f4e1b803d07b92": {
      "translations": {
        "python": {
          "source": "# instance: ec2.Instance\n\n# my_zone: route53.HostedZone\n\n\nelastic_ip = ec2.CfnEIP(self, \"EIP\",\n    domain=\"vpc\",\n    instance_id=instance.instance_id\n)\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(elastic_ip.ref)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = new CfnEIP(this, \"EIP\", new CfnEIPProps {\n    Domain = \"vpc\",\n    InstanceId = instance.InstanceId\n});\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(elasticIp.Ref)\n});",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = CfnEIP.Builder.create(this, \"EIP\")\n        .domain(\"vpc\")\n        .instanceId(instance.getInstanceId())\n        .build();\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(elasticIp.getRef()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var instance instance\n\nvar myZone hostedZone\n\nelasticIp := ec2.NewCfnEIP(this, jsii.String(\"EIP\"), &cfnEIPProps{\n\tdomain: jsii.String(\"vpc\"),\n\tinstanceId: instance.instanceId,\n})\nroute53.NewARecord(this, jsii.String(\"ARecord\"), &aRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromIpAddresses(elasticIp.ref),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\n\ndeclare const myZone: route53.HostedZone;\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 102
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIP",
        "@aws-cdk/aws-ec2.CfnEIPProps",
        "@aws-cdk/aws-ec2.Instance#instanceId",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\n\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "da4f916ab492910dad41d90470ec4dc68213f031bedd7fc8ac565f6561d43e2e"
    },
    "7f61f8dcc4902fe7af498737c7dd526e56191f7d8346864294cd17b5122dfc75": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone: route53.HostedZone\n# distribution: cloudfront.CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudfront \"github.com/aws-samples/dummy/awscdkawscloudfront\"\n\nvar myZone hostedZone\nvar distribution cloudFrontWebDistribution\nroute53.NewAaaaRecord(this, jsii.String(\"Alias\"), &aaaaRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromAlias(targets.NewCloudFrontTarget(distribution)),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 119
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "54a1d19e1434eb20d679c0e1389d9a0f23ff87681b33b82d6dece4ce55f37a46"
    },
    "3d2a69ae7d292e745749c73c61f0803920cbcba3daae77d7b7265c83836f876f": {
      "translations": {
        "python": {
          "source": "parent_zone = route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"someexample.com\",\n    cross_account_zone_delegation_principal=iam.AccountPrincipal(\"12345678901\"),\n    cross_account_zone_delegation_role_name=\"MyDelegationRole\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PublicHostedZone parentZone = new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"someexample.com\",\n    CrossAccountZoneDelegationPrincipal = new AccountPrincipal(\"12345678901\"),\n    CrossAccountZoneDelegationRoleName = \"MyDelegationRole\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone parentZone = PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"someexample.com\")\n        .crossAccountZoneDelegationPrincipal(new AccountPrincipal(\"12345678901\"))\n        .crossAccountZoneDelegationRoleName(\"MyDelegationRole\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "parentZone := route53.NewPublicHostedZone(this, jsii.String(\"HostedZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"someexample.com\"),\n\tcrossAccountZoneDelegationPrincipal: iam.NewAccountPrincipal(jsii.String(\"12345678901\")),\n\tcrossAccountZoneDelegationRoleName: jsii.String(\"MyDelegationRole\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 139
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "cb7bcbb1f5393547e7a5b673c239eae6e5f187abe0a54179527b7752be8d2f53"
    },
    "e1b78adef4b73ff13307d457a6d8408f40b85fd56ade7a4f8536afe4fd514e13": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "subZone := route53.NewPublicHostedZone(this, jsii.String(\"SubZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"sub.someexample.com\"),\n})\n\n// import the delegation role by constructing the roleArn\ndelegationRoleArn := stack.of(this).formatArn(&arnComponents{\n\tregion: jsii.String(\"\"),\n\t // IAM is global in each partition\n\tservice: jsii.String(\"iam\"),\n\taccount: jsii.String(\"parent-account-id\"),\n\tresource: jsii.String(\"role\"),\n\tresourceName: jsii.String(\"MyDelegationRole\"),\n})\ndelegationRole := iam.role.fromRoleArn(this, jsii.String(\"DelegationRole\"), delegationRoleArn)\n\n// create the record\n// create the record\nroute53.NewCrossAccountZoneDelegationRecord(this, jsii.String(\"delegate\"), &crossAccountZoneDelegationRecordProps{\n\tdelegatedZone: subZone,\n\tparentHostedZoneName: jsii.String(\"someexample.com\"),\n\t // or you can use parentHostedZoneId\n\tdelegationRole: delegationRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 149
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "7c43b3aedbf7f0e90e52096e32ad91f7aacf58567764dae6f5aa62ff741a9545"
    },
    "9d7011c271262218c32ed43b48d9790d66279653a5b11a31080763116ec63716": {
      "translations": {
        "python": {
          "source": "route53.HostedZone.from_lookup(self, \"MyZone\",\n    domain_name=\"example.com\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone.FromLookup(this, \"MyZone\", new HostedZoneProviderProps {\n    DomainName = \"example.com\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone.fromLookup(this, \"MyZone\", HostedZoneProviderProps.builder()\n        .domainName(\"example.com\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "route53.hostedZone.fromLookup(this, jsii.String(\"MyZone\"), &hostedZoneProviderProps{\n\tdomainName: jsii.String(\"example.com\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "route53.HostedZone.fromLookup(this, 'MyZone', {\n  domainName: 'example.com',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 177
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nroute53.HostedZone.fromLookup(this, 'MyZone', {\n  domainName: 'example.com',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "6ce1eae3a835d61415016d9e30aa9bb98d35db2152171b3b34574f9a2ddfcba6"
    },
    "dd02f3a7b30325e9d34ae7316f233ce1c5f472f6707ff15cb3925be18ca0386e": {
      "translations": {
        "python": {
          "source": "zone = route53.HostedZone.from_hosted_zone_attributes(self, \"MyZone\",\n    zone_name=\"example.com\",\n    hosted_zone_id=\"ZOJJZC49E0EPZ\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"MyZone\", new HostedZoneAttributes {\n    ZoneName = \"example.com\",\n    HostedZoneId = \"ZOJJZC49E0EPZ\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"MyZone\", HostedZoneAttributes.builder()\n        .zoneName(\"example.com\")\n        .hostedZoneId(\"ZOJJZC49E0EPZ\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "zone := route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"MyZone\"), &hostedZoneAttributes{\n\tzoneName: jsii.String(\"example.com\"),\n\thostedZoneId: jsii.String(\"ZOJJZC49E0EPZ\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const zone = route53.HostedZone.fromHostedZoneAttributes(this, 'MyZone', {\n  zoneName: 'example.com',\n  hostedZoneId: 'ZOJJZC49E0EPZ',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 199
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, 'MyZone', {\n  zoneName: 'example.com',\n  hostedZoneId: 'ZOJJZC49E0EPZ',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "1703dda9a9f372036ac99d7f526b3c2ebef9bd70dff2bce8476ef06cc4205183"
    },
    "642bb75f37a36ef44ba3cc3c3e311e904601a22d7509cb5541ccb04f5224c556": {
      "translations": {
        "python": {
          "source": "zone = route53.HostedZone.from_hosted_zone_id(self, \"MyZone\", \"ZOJJZC49E0EPZ\")",
          "version": "2"
        },
        "csharp": {
          "source": "IHostedZone zone = HostedZone.FromHostedZoneId(this, \"MyZone\", \"ZOJJZC49E0EPZ\");",
          "version": "1"
        },
        "java": {
          "source": "IHostedZone zone = HostedZone.fromHostedZoneId(this, \"MyZone\", \"ZOJJZC49E0EPZ\");",
          "version": "1"
        },
        "go": {
          "source": "zone := route53.hostedZone.fromHostedZoneId(this, jsii.String(\"MyZone\"), jsii.String(\"ZOJJZC49E0EPZ\"))",
          "version": "1"
        },
        "$": {
          "source": "const zone = route53.HostedZone.fromHostedZoneId(this, 'MyZone', 'ZOJJZC49E0EPZ');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 209
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneId",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst zone = route53.HostedZone.fromHostedZoneId(this, 'MyZone', 'ZOJJZC49E0EPZ');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "0d0f9107704fb0a40eab227ae54c995b15adc900c0ff26dd442e6ba15b856f85"
    },
    "615799be62e233b505cbfd7a1e068144f983d446ea236fcea99e04bd855e671e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Stack\nfrom aws_cdk.aws_ec2 import Vpc, VpcEndpointService\nfrom aws_cdk.aws_elasticloadbalancingv2 import NetworkLoadBalancer\nfrom aws_cdk.aws_route53 import PublicHostedZone, VpcEndpointServiceDomainName\n\nstack = Stack()\nvpc = Vpc(stack, \"VPC\")\nnlb = NetworkLoadBalancer(stack, \"NLB\",\n    vpc=vpc\n)\nvpces = VpcEndpointService(stack, \"VPCES\",\n    vpc_endpoint_service_load_balancers=[nlb]\n)\n# You must use a public hosted zone so domain ownership can be verified\nzone = PublicHostedZone(stack, \"PHZ\",\n    zone_name=\"aws-cdk.dev\"\n)\nVpcEndpointServiceDomainName(stack, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK.AWS.Route53;\n\nStack stack = new Stack();\nVpc vpc = new Vpc(stack, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(stack, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcEndpointService vpces = new VpcEndpointService(stack, \"VPCES\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { nlb }\n});\n// You must use a public hosted zone so domain ownership can be verified\nPublicHostedZone zone = new PublicHostedZone(stack, \"PHZ\", new PublicHostedZoneProps {\n    ZoneName = \"aws-cdk.dev\"\n});\nnew VpcEndpointServiceDomainName(stack, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.ec2.Vpc;\nimport software.amazon.awscdk.services.ec2.VpcEndpointService;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.NetworkLoadBalancer;\nimport software.amazon.awscdk.services.route53.PublicHostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\n\nStack stack = new Stack();\nVpc vpc = new Vpc(stack, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(stack, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcEndpointService vpces = VpcEndpointService.Builder.create(stack, \"VPCES\")\n        .vpcEndpointServiceLoadBalancers(List.of(nlb))\n        .build();\n// You must use a public hosted zone so domain ownership can be verified\nPublicHostedZone zone = PublicHostedZone.Builder.create(stack, \"PHZ\")\n        .zoneName(\"aws-cdk.dev\")\n        .build();\nVpcEndpointServiceDomainName.Builder.create(stack, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkcore \"github.com/aws-samples/dummy/awscdkcore\"type Stack awscdkcore.Stackimport awscdkawsec2 \"github.com/aws-samples/dummy/awscdkawsec2\"type Vpc awscdkawsec2.Vpc\ntype VpcEndpointService awscdkawsec2.VpcEndpointServiceimport awscdkawselasticloadbalancingv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"type NetworkLoadBalancer awscdkawselasticloadbalancingv2.NetworkLoadBalancerimport awscdkawsroute53 \"github.com/aws-samples/dummy/awscdkawsroute53\"type PublicHostedZone awscdkawsroute53.PublicHostedZone\ntype VpcEndpointServiceDomainName awscdkawsroute53.VpcEndpointServiceDomainName\n\nstack := NewStack()\nvpc := NewVpc(stack, jsii.String(\"VPC\"))\nnlb := NewNetworkLoadBalancer(stack, jsii.String(\"NLB\"), &networkLoadBalancerProps{\n\tvpc: vpc,\n})\nvpces := NewVpcEndpointService(stack, jsii.String(\"VPCES\"), &vpcEndpointServiceProps{\n\tvpcEndpointServiceLoadBalancers: []iVpcEndpointServiceLoadBalancer{\n\t\tnlb,\n\t},\n})\n// You must use a public hosted zone so domain ownership can be verified\nzone := NewPublicHostedZone(stack, jsii.String(\"PHZ\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"aws-cdk.dev\"),\n})\nNewVpcEndpointServiceDomainName(stack, jsii.String(\"EndpointDomain\"), &vpcEndpointServiceDomainNameProps{\n\tendpointService: vpces,\n\tdomainName: jsii.String(\"my-stuff.aws-cdk.dev\"),\n\tpublicHostedZone: zone,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { Stack } from '@aws-cdk/core';\nimport { Vpc, VpcEndpointService } from '@aws-cdk/aws-ec2';\nimport { NetworkLoadBalancer } from '@aws-cdk/aws-elasticloadbalancingv2';\nimport { PublicHostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\n\nconst stack = new Stack();\nconst vpc = new Vpc(stack, 'VPC');\nconst nlb = new NetworkLoadBalancer(stack, 'NLB', {\n  vpc,\n});\nconst vpces = new VpcEndpointService(stack, 'VPCES', {\n  vpcEndpointServiceLoadBalancers: [nlb],\n});\n// You must use a public hosted zone so domain ownership can be verified\nconst zone = new PublicHostedZone(stack, 'PHZ', {\n  zoneName: 'aws-cdk.dev',\n});\nnew VpcEndpointServiceDomainName(stack, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 236
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "import { Stack } from '@aws-cdk/core';\nimport { Vpc, VpcEndpointService } from '@aws-cdk/aws-ec2';\nimport { NetworkLoadBalancer } from '@aws-cdk/aws-elasticloadbalancingv2';\nimport { PublicHostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\n\nconst stack = new Stack();\nconst vpc = new Vpc(stack, 'VPC');\nconst nlb = new NetworkLoadBalancer(stack, 'NLB', {\n  vpc,\n});\nconst vpces = new VpcEndpointService(stack, 'VPCES', {\n  vpcEndpointServiceLoadBalancers: [nlb],\n});\n// You must use a public hosted zone so domain ownership can be verified\nconst zone = new PublicHostedZone(stack, 'PHZ', {\n  zoneName: 'aws-cdk.dev',\n});\nnew VpcEndpointServiceDomainName(stack, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
      "syntaxKindCounter": {
        "10": 11,
        "75": 31,
        "192": 1,
        "193": 4,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "0a46f782a33315677831442d4f803db32784c985f66568bf713ca1131c0ae74f"
    },
    "de43d9436a2ba511b8b570cbeb5378b980d7f81089ca9f8c07a868a3d8ae3f4c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigw\n\n# zone: route53.HostedZone\n# rest_api: apigw.LambdaRestApi\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(rest_api))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ApiGateway(restApi))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ApiGateway(restApi)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigw \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar zone hostedZone\nvar restApi lambdaRestApi\n\nroute53.NewARecord(this, jsii.String(\"AliasRecord\"), &aRecordProps{\n\tzone: zone,\n\ttarget: route53.recordTarget.fromAlias(targets.NewApiGateway(restApi)),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.ARecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ebf664f79401a36186a6f0e93246c00fd823ba3d5f4d1fa729a7b77f2a508457"
    },
    "8a44ee7c02c9eeec7c97eda8f8f3b9a7191e02b1745e94be5a8fce6839dd8e10": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigw\n\n# zone: route53.HostedZone\n# rest_api: apigw.LambdaRestApi\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(rest_api))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ApiGateway(restApi))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ApiGateway(restApi)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigw \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar zone hostedZone\nvar restApi lambdaRestApi\n\nroute53.NewARecord(this, jsii.String(\"AliasRecord\"), &aRecordProps{\n\tzone: zone,\n\ttarget: route53.recordTarget.fromAlias(targets.NewApiGateway(restApi)),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.ARecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ebf664f79401a36186a6f0e93246c00fd823ba3d5f4d1fa729a7b77f2a508457"
    },
    "d613ba5cdbfcf62662ca81c0ced5f30971e695a1c53596fd1be7dcfdc81fccc9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone: route53.HostedZone\n# distribution: cloudfront.CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudfront \"github.com/aws-samples/dummy/awscdkawscloudfront\"\n\nvar myZone hostedZone\nvar distribution cloudFrontWebDistribution\nroute53.NewAaaaRecord(this, jsii.String(\"Alias\"), &aaaaRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromAlias(targets.NewCloudFrontTarget(distribution)),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.AaaaRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "54a1d19e1434eb20d679c0e1389d9a0f23ff87681b33b82d6dece4ce55f37a46"
    },
    "3835a7014a54a586d93bda9139dad15d314e95d01a37b00cf809387e26864cd1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone: route53.HostedZone\n# distribution: cloudfront.CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudfront \"github.com/aws-samples/dummy/awscdkawscloudfront\"\n\nvar myZone hostedZone\nvar distribution cloudFrontWebDistribution\nroute53.NewAaaaRecord(this, jsii.String(\"Alias\"), &aaaaRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromAlias(targets.NewCloudFrontTarget(distribution)),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.AaaaRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "54a1d19e1434eb20d679c0e1389d9a0f23ff87681b33b82d6dece4ce55f37a46"
    },
    "9121366a4d118793049b0568c5b41df2640798ab310f206939e8575c3a45420e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\n# alias_record_target: route53.IAliasRecordTarget\n\naddress_record_target = route53.AddressRecordTarget.from_alias(alias_record_target)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nIAliasRecordTarget aliasRecordTarget;\n\nRecordTarget addressRecordTarget = AddressRecordTarget.FromAlias(aliasRecordTarget);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nIAliasRecordTarget aliasRecordTarget;\n\nRecordTarget addressRecordTarget = AddressRecordTarget.fromAlias(aliasRecordTarget);",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\nvar aliasRecordTarget iAliasRecordTarget\naddressRecordTarget := route53.addressRecordTarget.fromAlias(aliasRecordTarget)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const aliasRecordTarget: route53.IAliasRecordTarget;\nconst addressRecordTarget = route53.AddressRecordTarget.fromAlias(aliasRecordTarget);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.AddressRecordTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.AddressRecordTarget",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const aliasRecordTarget: route53.IAliasRecordTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst addressRecordTarget = route53.AddressRecordTarget.fromAlias(aliasRecordTarget);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "d828f71e80e685b446776138fd809e91d052d03c90566fee7d7baa561025b7e5"
    },
    "b4ada9967c4a6513b3a46a04b26c7c7ee629d6f9325f38d4994f565b2226b744": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nalias_record_target_config = route53.AliasRecordTargetConfig(\n    dns_name=\"dnsName\",\n    hosted_zone_id=\"hostedZoneId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nAliasRecordTargetConfig aliasRecordTargetConfig = new AliasRecordTargetConfig {\n    DnsName = \"dnsName\",\n    HostedZoneId = \"hostedZoneId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nAliasRecordTargetConfig aliasRecordTargetConfig = AliasRecordTargetConfig.builder()\n        .dnsName(\"dnsName\")\n        .hostedZoneId(\"hostedZoneId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\naliasRecordTargetConfig := &aliasRecordTargetConfig{\n\tdnsName: jsii.String(\"dnsName\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst aliasRecordTargetConfig: route53.AliasRecordTargetConfig = {\n  dnsName: 'dnsName',\n  hostedZoneId: 'hostedZoneId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.AliasRecordTargetConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.AliasRecordTargetConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasRecordTargetConfig: route53.AliasRecordTargetConfig = {\n  dnsName: 'dnsName',\n  hostedZoneId: 'hostedZoneId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7d06d92af1aaab5cb3a18e84de37d7ca24b10cc075e6f84b2ccc938448f8c3ca"
    },
    "1d02642213730d43a860fe863a4d75a03ae926bffb36ef982fad643e0b0724d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\ncaa_amazon_record = route53.CaaAmazonRecord(self, \"MyCaaAmazonRecord\",\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nCaaAmazonRecord caaAmazonRecord = new CaaAmazonRecord(this, \"MyCaaAmazonRecord\", new CaaAmazonRecordProps {\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nCaaAmazonRecord caaAmazonRecord = CaaAmazonRecord.Builder.create(this, \"MyCaaAmazonRecord\")\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\ncaaAmazonRecord := route53.NewCaaAmazonRecord(this, jsii.String(\"MyCaaAmazonRecord\"), &caaAmazonRecordProps{\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst caaAmazonRecord = new route53.CaaAmazonRecord(this, 'MyCaaAmazonRecord', {\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CaaAmazonRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CaaAmazonRecord",
        "@aws-cdk/aws-route53.CaaAmazonRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst caaAmazonRecord = new route53.CaaAmazonRecord(this, 'MyCaaAmazonRecord', {\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a8d01413cf0a31e3629b884313413ed54cd441b7e22bf227c8fa018136f90c6a"
    },
    "88a88672fb00e5c32c534a894275a0c09c57bad78f753fb4be2c5a8404966a0c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\ncaa_amazon_record_props = route53.CaaAmazonRecordProps(\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nCaaAmazonRecordProps caaAmazonRecordProps = new CaaAmazonRecordProps {\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nCaaAmazonRecordProps caaAmazonRecordProps = CaaAmazonRecordProps.builder()\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\ncaaAmazonRecordProps := &caaAmazonRecordProps{\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst caaAmazonRecordProps: route53.CaaAmazonRecordProps = {\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CaaAmazonRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CaaAmazonRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst caaAmazonRecordProps: route53.CaaAmazonRecordProps = {\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7868310eeff5ac0bcb3e821f12ae2b7bacf43eb75efdc5c3b43d4201bd25f692"
    },
    "2887066209b44c4aae8dc9c8d331c7f4b32f27145908704b82567b9ee8915399": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\ncaa_record = route53.CaaRecord(self, \"MyCaaRecord\",\n    values=[route53.CaaRecordValue(\n        flag=123,\n        tag=route53.CaaTag.ISSUE,\n        value=\"value\"\n    )],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nCaaRecord caaRecord = new CaaRecord(this, \"MyCaaRecord\", new CaaRecordProps {\n    Values = new [] { new CaaRecordValue {\n        Flag = 123,\n        Tag = CaaTag.ISSUE,\n        Value = \"value\"\n    } },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nCaaRecord caaRecord = CaaRecord.Builder.create(this, \"MyCaaRecord\")\n        .values(List.of(CaaRecordValue.builder()\n                .flag(123)\n                .tag(CaaTag.ISSUE)\n                .value(\"value\")\n                .build()))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\ncaaRecord := route53.NewCaaRecord(this, jsii.String(\"MyCaaRecord\"), &caaRecordProps{\n\tvalues: []caaRecordValue{\n\t\t&caaRecordValue{\n\t\t\tflag: jsii.Number(123),\n\t\t\ttag: route53.caaTag_ISSUE,\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst caaRecord = new route53.CaaRecord(this, 'MyCaaRecord', {\n  values: [{\n    flag: 123,\n    tag: route53.CaaTag.ISSUE,\n    value: 'value',\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CaaRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CaaRecord",
        "@aws-cdk/aws-route53.CaaRecordProps",
        "@aws-cdk/aws-route53.CaaTag",
        "@aws-cdk/aws-route53.CaaTag#ISSUE",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst caaRecord = new route53.CaaRecord(this, 'MyCaaRecord', {\n  values: [{\n    flag: 123,\n    tag: route53.CaaTag.ISSUE,\n    value: 'value',\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "565d7c40f7cf6af2692a7ee1ec6e9fb8c6c935b94714cb3562574904f98d124f"
    },
    "1f33f2074040810f81fc821d9b860d74170bc0ebe6c6c7427b023e91d588e03f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\ncaa_record_props = route53.CaaRecordProps(\n    values=[route53.CaaRecordValue(\n        flag=123,\n        tag=route53.CaaTag.ISSUE,\n        value=\"value\"\n    )],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nCaaRecordProps caaRecordProps = new CaaRecordProps {\n    Values = new [] { new CaaRecordValue {\n        Flag = 123,\n        Tag = CaaTag.ISSUE,\n        Value = \"value\"\n    } },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nCaaRecordProps caaRecordProps = CaaRecordProps.builder()\n        .values(List.of(CaaRecordValue.builder()\n                .flag(123)\n                .tag(CaaTag.ISSUE)\n                .value(\"value\")\n                .build()))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\ncaaRecordProps := &caaRecordProps{\n\tvalues: []caaRecordValue{\n\t\t&caaRecordValue{\n\t\t\tflag: jsii.Number(123),\n\t\t\ttag: route53.caaTag_ISSUE,\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst caaRecordProps: route53.CaaRecordProps = {\n  values: [{\n    flag: 123,\n    tag: route53.CaaTag.ISSUE,\n    value: 'value',\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CaaRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CaaRecordProps",
        "@aws-cdk/aws-route53.CaaTag",
        "@aws-cdk/aws-route53.CaaTag#ISSUE",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst caaRecordProps: route53.CaaRecordProps = {\n  values: [{\n    flag: 123,\n    tag: route53.CaaTag.ISSUE,\n    value: 'value',\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 23,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ca2ef476f0dd769800836e7b0099b5ce67d0f4967f87eeab52d16684c7e1f039"
    },
    "81ab8d440bfa8d4f0e70cedb437de2cb13e3bed9c4b914340a25c72809f71e73": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncaa_record_value = route53.CaaRecordValue(\n    flag=123,\n    tag=route53.CaaTag.ISSUE,\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCaaRecordValue caaRecordValue = new CaaRecordValue {\n    Flag = 123,\n    Tag = CaaTag.ISSUE,\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCaaRecordValue caaRecordValue = CaaRecordValue.builder()\n        .flag(123)\n        .tag(CaaTag.ISSUE)\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncaaRecordValue := &caaRecordValue{\n\tflag: jsii.Number(123),\n\ttag: route53.caaTag_ISSUE,\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst caaRecordValue: route53.CaaRecordValue = {\n  flag: 123,\n  tag: route53.CaaTag.ISSUE,\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CaaRecordValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CaaRecordValue",
        "@aws-cdk/aws-route53.CaaTag",
        "@aws-cdk/aws-route53.CaaTag#ISSUE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst caaRecordValue: route53.CaaRecordValue = {\n  flag: 123,\n  tag: route53.CaaTag.ISSUE,\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cb2be2f053a560321d8e52ce77baf2950e59f2afe5550e8ed76aee5f8b73ec84"
    },
    "5582357fc663f8f4f3cf4df36b5657966f7d6366d3bf56b23685f43980d009f3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_dNSSEC = route53.CfnDNSSEC(self, \"MyCfnDNSSEC\",\n    hosted_zone_id=\"hostedZoneId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnDNSSEC cfnDNSSEC = new CfnDNSSEC(this, \"MyCfnDNSSEC\", new CfnDNSSECProps {\n    HostedZoneId = \"hostedZoneId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnDNSSEC cfnDNSSEC = CfnDNSSEC.Builder.create(this, \"MyCfnDNSSEC\")\n        .hostedZoneId(\"hostedZoneId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnDNSSEC := route53.NewCfnDNSSEC(this, jsii.String(\"MyCfnDNSSEC\"), &cfnDNSSECProps{\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnDNSSEC = new route53.CfnDNSSEC(this, 'MyCfnDNSSEC', {\n  hostedZoneId: 'hostedZoneId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnDNSSEC"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnDNSSEC",
        "@aws-cdk/aws-route53.CfnDNSSECProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDNSSEC = new route53.CfnDNSSEC(this, 'MyCfnDNSSEC', {\n  hostedZoneId: 'hostedZoneId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5ca900626e7aa88fb5ab2b7761e0c0212debf713378245e8e8ade30881b77abf"
    },
    "dd881f002de46c51e1219dec66e9256c2b3e265205795d396e0876225f7fd8ca": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_dNSSECProps = route53.CfnDNSSECProps(\n    hosted_zone_id=\"hostedZoneId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnDNSSECProps cfnDNSSECProps = new CfnDNSSECProps {\n    HostedZoneId = \"hostedZoneId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnDNSSECProps cfnDNSSECProps = CfnDNSSECProps.builder()\n        .hostedZoneId(\"hostedZoneId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnDNSSECProps := &cfnDNSSECProps{\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnDNSSECProps: route53.CfnDNSSECProps = {\n  hostedZoneId: 'hostedZoneId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnDNSSECProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnDNSSECProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDNSSECProps: route53.CfnDNSSECProps = {\n  hostedZoneId: 'hostedZoneId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f0198f9fb9fe8aa24d55b54f014ce007647cb4c542cede8599089594d0f69109"
    },
    "b6a7c4929d71c971f2fdd71a62153d843ef6b03e83837e14d3cffc838eac98ef": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_health_check = route53.CfnHealthCheck(self, \"MyCfnHealthCheck\",\n    health_check_config=route53.CfnHealthCheck.HealthCheckConfigProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        alarm_identifier=route53.CfnHealthCheck.AlarmIdentifierProperty(\n            name=\"name\",\n            region=\"region\"\n        ),\n        child_health_checks=[\"childHealthChecks\"],\n        enable_sni=False,\n        failure_threshold=123,\n        fully_qualified_domain_name=\"fullyQualifiedDomainName\",\n        health_threshold=123,\n        insufficient_data_health_status=\"insufficientDataHealthStatus\",\n        inverted=False,\n        ip_address=\"ipAddress\",\n        measure_latency=False,\n        port=123,\n        regions=[\"regions\"],\n        request_interval=123,\n        resource_path=\"resourcePath\",\n        routing_control_arn=\"routingControlArn\",\n        search_string=\"searchString\"\n    ),\n\n    # the properties below are optional\n    health_check_tags=[route53.CfnHealthCheck.HealthCheckTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnHealthCheck cfnHealthCheck = new CfnHealthCheck(this, \"MyCfnHealthCheck\", new CfnHealthCheckProps {\n    HealthCheckConfig = new HealthCheckConfigProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        AlarmIdentifier = new AlarmIdentifierProperty {\n            Name = \"name\",\n            Region = \"region\"\n        },\n        ChildHealthChecks = new [] { \"childHealthChecks\" },\n        EnableSni = false,\n        FailureThreshold = 123,\n        FullyQualifiedDomainName = \"fullyQualifiedDomainName\",\n        HealthThreshold = 123,\n        InsufficientDataHealthStatus = \"insufficientDataHealthStatus\",\n        Inverted = false,\n        IpAddress = \"ipAddress\",\n        MeasureLatency = false,\n        Port = 123,\n        Regions = new [] { \"regions\" },\n        RequestInterval = 123,\n        ResourcePath = \"resourcePath\",\n        RoutingControlArn = \"routingControlArn\",\n        SearchString = \"searchString\"\n    },\n\n    // the properties below are optional\n    HealthCheckTags = new [] { new HealthCheckTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnHealthCheck cfnHealthCheck = CfnHealthCheck.Builder.create(this, \"MyCfnHealthCheck\")\n        .healthCheckConfig(HealthCheckConfigProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .alarmIdentifier(AlarmIdentifierProperty.builder()\n                        .name(\"name\")\n                        .region(\"region\")\n                        .build())\n                .childHealthChecks(List.of(\"childHealthChecks\"))\n                .enableSni(false)\n                .failureThreshold(123)\n                .fullyQualifiedDomainName(\"fullyQualifiedDomainName\")\n                .healthThreshold(123)\n                .insufficientDataHealthStatus(\"insufficientDataHealthStatus\")\n                .inverted(false)\n                .ipAddress(\"ipAddress\")\n                .measureLatency(false)\n                .port(123)\n                .regions(List.of(\"regions\"))\n                .requestInterval(123)\n                .resourcePath(\"resourcePath\")\n                .routingControlArn(\"routingControlArn\")\n                .searchString(\"searchString\")\n                .build())\n\n        // the properties below are optional\n        .healthCheckTags(List.of(HealthCheckTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnHealthCheck := route53.NewCfnHealthCheck(this, jsii.String(\"MyCfnHealthCheck\"), &cfnHealthCheckProps{\n\thealthCheckConfig: &healthCheckConfigProperty{\n\t\ttype: jsii.String(\"type\"),\n\n\t\t// the properties below are optional\n\t\talarmIdentifier: &alarmIdentifierProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tregion: jsii.String(\"region\"),\n\t\t},\n\t\tchildHealthChecks: []*string{\n\t\t\tjsii.String(\"childHealthChecks\"),\n\t\t},\n\t\tenableSni: jsii.Boolean(false),\n\t\tfailureThreshold: jsii.Number(123),\n\t\tfullyQualifiedDomainName: jsii.String(\"fullyQualifiedDomainName\"),\n\t\thealthThreshold: jsii.Number(123),\n\t\tinsufficientDataHealthStatus: jsii.String(\"insufficientDataHealthStatus\"),\n\t\tinverted: jsii.Boolean(false),\n\t\tipAddress: jsii.String(\"ipAddress\"),\n\t\tmeasureLatency: jsii.Boolean(false),\n\t\tport: jsii.Number(123),\n\t\tregions: []*string{\n\t\t\tjsii.String(\"regions\"),\n\t\t},\n\t\trequestInterval: jsii.Number(123),\n\t\tresourcePath: jsii.String(\"resourcePath\"),\n\t\troutingControlArn: jsii.String(\"routingControlArn\"),\n\t\tsearchString: jsii.String(\"searchString\"),\n\t},\n\n\t// the properties below are optional\n\thealthCheckTags: []interface{}{\n\t\t&healthCheckTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnHealthCheck = new route53.CfnHealthCheck(this, 'MyCfnHealthCheck', {\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    alarmIdentifier: {\n      name: 'name',\n      region: 'region',\n    },\n    childHealthChecks: ['childHealthChecks'],\n    enableSni: false,\n    failureThreshold: 123,\n    fullyQualifiedDomainName: 'fullyQualifiedDomainName',\n    healthThreshold: 123,\n    insufficientDataHealthStatus: 'insufficientDataHealthStatus',\n    inverted: false,\n    ipAddress: 'ipAddress',\n    measureLatency: false,\n    port: 123,\n    regions: ['regions'],\n    requestInterval: 123,\n    resourcePath: 'resourcePath',\n    routingControlArn: 'routingControlArn',\n    searchString: 'searchString',\n  },\n\n  // the properties below are optional\n  healthCheckTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHealthCheck"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHealthCheck",
        "@aws-cdk/aws-route53.CfnHealthCheckProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHealthCheck = new route53.CfnHealthCheck(this, 'MyCfnHealthCheck', {\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    alarmIdentifier: {\n      name: 'name',\n      region: 'region',\n    },\n    childHealthChecks: ['childHealthChecks'],\n    enableSni: false,\n    failureThreshold: 123,\n    fullyQualifiedDomainName: 'fullyQualifiedDomainName',\n    healthThreshold: 123,\n    insufficientDataHealthStatus: 'insufficientDataHealthStatus',\n    inverted: false,\n    ipAddress: 'ipAddress',\n    measureLatency: false,\n    port: 123,\n    regions: ['regions'],\n    requestInterval: 123,\n    resourcePath: 'resourcePath',\n    routingControlArn: 'routingControlArn',\n    searchString: 'searchString',\n  },\n\n  // the properties below are optional\n  healthCheckTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 15,
        "75": 27,
        "91": 3,
        "104": 1,
        "192": 3,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "26facefd45e5c72873dd52499205768eea4c44af97b04b6f5cff04b8850f9c19"
    },
    "ef652e7a7b2eb0af20e218a3eacbf10e444e327b10b2fb8d24176a3cc64341fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nalarm_identifier_property = route53.CfnHealthCheck.AlarmIdentifierProperty(\n    name=\"name\",\n    region=\"region\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nAlarmIdentifierProperty alarmIdentifierProperty = new AlarmIdentifierProperty {\n    Name = \"name\",\n    Region = \"region\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nAlarmIdentifierProperty alarmIdentifierProperty = AlarmIdentifierProperty.builder()\n        .name(\"name\")\n        .region(\"region\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nalarmIdentifierProperty := &alarmIdentifierProperty{\n\tname: jsii.String(\"name\"),\n\tregion: jsii.String(\"region\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst alarmIdentifierProperty: route53.CfnHealthCheck.AlarmIdentifierProperty = {\n  name: 'name',\n  region: 'region',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHealthCheck.AlarmIdentifierProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHealthCheck.AlarmIdentifierProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst alarmIdentifierProperty: route53.CfnHealthCheck.AlarmIdentifierProperty = {\n  name: 'name',\n  region: 'region',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6e1e1f967976a1f071a036f7e6c02e78ee564ed912943bba8c83651ee70cd4d7"
    },
    "a069b3fafb6d4fd826ecae87983f7bdeac0e2a7da41e37ebda5fed3d838a1d93": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nhealth_check_config_property = route53.CfnHealthCheck.HealthCheckConfigProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    alarm_identifier=route53.CfnHealthCheck.AlarmIdentifierProperty(\n        name=\"name\",\n        region=\"region\"\n    ),\n    child_health_checks=[\"childHealthChecks\"],\n    enable_sni=False,\n    failure_threshold=123,\n    fully_qualified_domain_name=\"fullyQualifiedDomainName\",\n    health_threshold=123,\n    insufficient_data_health_status=\"insufficientDataHealthStatus\",\n    inverted=False,\n    ip_address=\"ipAddress\",\n    measure_latency=False,\n    port=123,\n    regions=[\"regions\"],\n    request_interval=123,\n    resource_path=\"resourcePath\",\n    routing_control_arn=\"routingControlArn\",\n    search_string=\"searchString\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nHealthCheckConfigProperty healthCheckConfigProperty = new HealthCheckConfigProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    AlarmIdentifier = new AlarmIdentifierProperty {\n        Name = \"name\",\n        Region = \"region\"\n    },\n    ChildHealthChecks = new [] { \"childHealthChecks\" },\n    EnableSni = false,\n    FailureThreshold = 123,\n    FullyQualifiedDomainName = \"fullyQualifiedDomainName\",\n    HealthThreshold = 123,\n    InsufficientDataHealthStatus = \"insufficientDataHealthStatus\",\n    Inverted = false,\n    IpAddress = \"ipAddress\",\n    MeasureLatency = false,\n    Port = 123,\n    Regions = new [] { \"regions\" },\n    RequestInterval = 123,\n    ResourcePath = \"resourcePath\",\n    RoutingControlArn = \"routingControlArn\",\n    SearchString = \"searchString\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nHealthCheckConfigProperty healthCheckConfigProperty = HealthCheckConfigProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .alarmIdentifier(AlarmIdentifierProperty.builder()\n                .name(\"name\")\n                .region(\"region\")\n                .build())\n        .childHealthChecks(List.of(\"childHealthChecks\"))\n        .enableSni(false)\n        .failureThreshold(123)\n        .fullyQualifiedDomainName(\"fullyQualifiedDomainName\")\n        .healthThreshold(123)\n        .insufficientDataHealthStatus(\"insufficientDataHealthStatus\")\n        .inverted(false)\n        .ipAddress(\"ipAddress\")\n        .measureLatency(false)\n        .port(123)\n        .regions(List.of(\"regions\"))\n        .requestInterval(123)\n        .resourcePath(\"resourcePath\")\n        .routingControlArn(\"routingControlArn\")\n        .searchString(\"searchString\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nhealthCheckConfigProperty := &healthCheckConfigProperty{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\talarmIdentifier: &alarmIdentifierProperty{\n\t\tname: jsii.String(\"name\"),\n\t\tregion: jsii.String(\"region\"),\n\t},\n\tchildHealthChecks: []*string{\n\t\tjsii.String(\"childHealthChecks\"),\n\t},\n\tenableSni: jsii.Boolean(false),\n\tfailureThreshold: jsii.Number(123),\n\tfullyQualifiedDomainName: jsii.String(\"fullyQualifiedDomainName\"),\n\thealthThreshold: jsii.Number(123),\n\tinsufficientDataHealthStatus: jsii.String(\"insufficientDataHealthStatus\"),\n\tinverted: jsii.Boolean(false),\n\tipAddress: jsii.String(\"ipAddress\"),\n\tmeasureLatency: jsii.Boolean(false),\n\tport: jsii.Number(123),\n\tregions: []*string{\n\t\tjsii.String(\"regions\"),\n\t},\n\trequestInterval: jsii.Number(123),\n\tresourcePath: jsii.String(\"resourcePath\"),\n\troutingControlArn: jsii.String(\"routingControlArn\"),\n\tsearchString: jsii.String(\"searchString\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst healthCheckConfigProperty: route53.CfnHealthCheck.HealthCheckConfigProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  alarmIdentifier: {\n    name: 'name',\n    region: 'region',\n  },\n  childHealthChecks: ['childHealthChecks'],\n  enableSni: false,\n  failureThreshold: 123,\n  fullyQualifiedDomainName: 'fullyQualifiedDomainName',\n  healthThreshold: 123,\n  insufficientDataHealthStatus: 'insufficientDataHealthStatus',\n  inverted: false,\n  ipAddress: 'ipAddress',\n  measureLatency: false,\n  port: 123,\n  regions: ['regions'],\n  requestInterval: 123,\n  resourcePath: 'resourcePath',\n  routingControlArn: 'routingControlArn',\n  searchString: 'searchString',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHealthCheck.HealthCheckConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHealthCheck.HealthCheckConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckConfigProperty: route53.CfnHealthCheck.HealthCheckConfigProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  alarmIdentifier: {\n    name: 'name',\n    region: 'region',\n  },\n  childHealthChecks: ['childHealthChecks'],\n  enableSni: false,\n  failureThreshold: 123,\n  fullyQualifiedDomainName: 'fullyQualifiedDomainName',\n  healthThreshold: 123,\n  insufficientDataHealthStatus: 'insufficientDataHealthStatus',\n  inverted: false,\n  ipAddress: 'ipAddress',\n  measureLatency: false,\n  port: 123,\n  regions: ['regions'],\n  requestInterval: 123,\n  resourcePath: 'resourcePath',\n  routingControlArn: 'routingControlArn',\n  searchString: 'searchString',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 12,
        "75": 24,
        "91": 3,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "031738971437ba05e7b2c13ee060c4278f1ae35fb13c30fe0221c8d54034f6fd"
    },
    "1e99bb1809ba82b668c8d190f2a198296ae61cafa66cecc464606d65834b26a9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nhealth_check_tag_property = route53.CfnHealthCheck.HealthCheckTagProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nHealthCheckTagProperty healthCheckTagProperty = new HealthCheckTagProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nHealthCheckTagProperty healthCheckTagProperty = HealthCheckTagProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nhealthCheckTagProperty := &healthCheckTagProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst healthCheckTagProperty: route53.CfnHealthCheck.HealthCheckTagProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHealthCheck.HealthCheckTagProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHealthCheck.HealthCheckTagProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckTagProperty: route53.CfnHealthCheck.HealthCheckTagProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c6ad253984699ddfe75066dc3d9f37b1ad78f4762b46df5cf10ac2afd047791f"
    },
    "f0d34c47ca66268468fd61bf2fe27c246a2232c70122a11b2fd69f7e3ec1c588": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_health_check_props = route53.CfnHealthCheckProps(\n    health_check_config=route53.CfnHealthCheck.HealthCheckConfigProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        alarm_identifier=route53.CfnHealthCheck.AlarmIdentifierProperty(\n            name=\"name\",\n            region=\"region\"\n        ),\n        child_health_checks=[\"childHealthChecks\"],\n        enable_sni=False,\n        failure_threshold=123,\n        fully_qualified_domain_name=\"fullyQualifiedDomainName\",\n        health_threshold=123,\n        insufficient_data_health_status=\"insufficientDataHealthStatus\",\n        inverted=False,\n        ip_address=\"ipAddress\",\n        measure_latency=False,\n        port=123,\n        regions=[\"regions\"],\n        request_interval=123,\n        resource_path=\"resourcePath\",\n        routing_control_arn=\"routingControlArn\",\n        search_string=\"searchString\"\n    ),\n\n    # the properties below are optional\n    health_check_tags=[route53.CfnHealthCheck.HealthCheckTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnHealthCheckProps cfnHealthCheckProps = new CfnHealthCheckProps {\n    HealthCheckConfig = new HealthCheckConfigProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        AlarmIdentifier = new AlarmIdentifierProperty {\n            Name = \"name\",\n            Region = \"region\"\n        },\n        ChildHealthChecks = new [] { \"childHealthChecks\" },\n        EnableSni = false,\n        FailureThreshold = 123,\n        FullyQualifiedDomainName = \"fullyQualifiedDomainName\",\n        HealthThreshold = 123,\n        InsufficientDataHealthStatus = \"insufficientDataHealthStatus\",\n        Inverted = false,\n        IpAddress = \"ipAddress\",\n        MeasureLatency = false,\n        Port = 123,\n        Regions = new [] { \"regions\" },\n        RequestInterval = 123,\n        ResourcePath = \"resourcePath\",\n        RoutingControlArn = \"routingControlArn\",\n        SearchString = \"searchString\"\n    },\n\n    // the properties below are optional\n    HealthCheckTags = new [] { new HealthCheckTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnHealthCheckProps cfnHealthCheckProps = CfnHealthCheckProps.builder()\n        .healthCheckConfig(HealthCheckConfigProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .alarmIdentifier(AlarmIdentifierProperty.builder()\n                        .name(\"name\")\n                        .region(\"region\")\n                        .build())\n                .childHealthChecks(List.of(\"childHealthChecks\"))\n                .enableSni(false)\n                .failureThreshold(123)\n                .fullyQualifiedDomainName(\"fullyQualifiedDomainName\")\n                .healthThreshold(123)\n                .insufficientDataHealthStatus(\"insufficientDataHealthStatus\")\n                .inverted(false)\n                .ipAddress(\"ipAddress\")\n                .measureLatency(false)\n                .port(123)\n                .regions(List.of(\"regions\"))\n                .requestInterval(123)\n                .resourcePath(\"resourcePath\")\n                .routingControlArn(\"routingControlArn\")\n                .searchString(\"searchString\")\n                .build())\n\n        // the properties below are optional\n        .healthCheckTags(List.of(HealthCheckTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnHealthCheckProps := &cfnHealthCheckProps{\n\thealthCheckConfig: &healthCheckConfigProperty{\n\t\ttype: jsii.String(\"type\"),\n\n\t\t// the properties below are optional\n\t\talarmIdentifier: &alarmIdentifierProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tregion: jsii.String(\"region\"),\n\t\t},\n\t\tchildHealthChecks: []*string{\n\t\t\tjsii.String(\"childHealthChecks\"),\n\t\t},\n\t\tenableSni: jsii.Boolean(false),\n\t\tfailureThreshold: jsii.Number(123),\n\t\tfullyQualifiedDomainName: jsii.String(\"fullyQualifiedDomainName\"),\n\t\thealthThreshold: jsii.Number(123),\n\t\tinsufficientDataHealthStatus: jsii.String(\"insufficientDataHealthStatus\"),\n\t\tinverted: jsii.Boolean(false),\n\t\tipAddress: jsii.String(\"ipAddress\"),\n\t\tmeasureLatency: jsii.Boolean(false),\n\t\tport: jsii.Number(123),\n\t\tregions: []*string{\n\t\t\tjsii.String(\"regions\"),\n\t\t},\n\t\trequestInterval: jsii.Number(123),\n\t\tresourcePath: jsii.String(\"resourcePath\"),\n\t\troutingControlArn: jsii.String(\"routingControlArn\"),\n\t\tsearchString: jsii.String(\"searchString\"),\n\t},\n\n\t// the properties below are optional\n\thealthCheckTags: []interface{}{\n\t\t&healthCheckTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnHealthCheckProps: route53.CfnHealthCheckProps = {\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    alarmIdentifier: {\n      name: 'name',\n      region: 'region',\n    },\n    childHealthChecks: ['childHealthChecks'],\n    enableSni: false,\n    failureThreshold: 123,\n    fullyQualifiedDomainName: 'fullyQualifiedDomainName',\n    healthThreshold: 123,\n    insufficientDataHealthStatus: 'insufficientDataHealthStatus',\n    inverted: false,\n    ipAddress: 'ipAddress',\n    measureLatency: false,\n    port: 123,\n    regions: ['regions'],\n    requestInterval: 123,\n    resourcePath: 'resourcePath',\n    routingControlArn: 'routingControlArn',\n    searchString: 'searchString',\n  },\n\n  // the properties below are optional\n  healthCheckTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHealthCheckProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHealthCheckProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHealthCheckProps: route53.CfnHealthCheckProps = {\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    alarmIdentifier: {\n      name: 'name',\n      region: 'region',\n    },\n    childHealthChecks: ['childHealthChecks'],\n    enableSni: false,\n    failureThreshold: 123,\n    fullyQualifiedDomainName: 'fullyQualifiedDomainName',\n    healthThreshold: 123,\n    insufficientDataHealthStatus: 'insufficientDataHealthStatus',\n    inverted: false,\n    ipAddress: 'ipAddress',\n    measureLatency: false,\n    port: 123,\n    regions: ['regions'],\n    requestInterval: 123,\n    resourcePath: 'resourcePath',\n    routingControlArn: 'routingControlArn',\n    searchString: 'searchString',\n  },\n\n  // the properties below are optional\n  healthCheckTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 14,
        "75": 27,
        "91": 3,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "dfb3f933f3a04baf5d2552c82c16439614f0c650558cea54b5d7c808a3969ed2"
    },
    "c4860e8771e84112e9d1c30c93ddf7a79e94123d5adb26843d7785abdfe7fb8d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_hosted_zone = route53.CfnHostedZone(self, \"MyCfnHostedZone\",\n    hosted_zone_config=route53.CfnHostedZone.HostedZoneConfigProperty(\n        comment=\"comment\"\n    ),\n    hosted_zone_tags=[route53.CfnHostedZone.HostedZoneTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    name=\"name\",\n    query_logging_config=route53.CfnHostedZone.QueryLoggingConfigProperty(\n        cloud_watch_logs_log_group_arn=\"cloudWatchLogsLogGroupArn\"\n    ),\n    vpcs=[route53.CfnHostedZone.VPCProperty(\n        vpc_id=\"vpcId\",\n        vpc_region=\"vpcRegion\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnHostedZone cfnHostedZone = new CfnHostedZone(this, \"MyCfnHostedZone\", new CfnHostedZoneProps {\n    HostedZoneConfig = new HostedZoneConfigProperty {\n        Comment = \"comment\"\n    },\n    HostedZoneTags = new [] { new HostedZoneTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Name = \"name\",\n    QueryLoggingConfig = new QueryLoggingConfigProperty {\n        CloudWatchLogsLogGroupArn = \"cloudWatchLogsLogGroupArn\"\n    },\n    Vpcs = new [] { new VPCProperty {\n        VpcId = \"vpcId\",\n        VpcRegion = \"vpcRegion\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnHostedZone cfnHostedZone = CfnHostedZone.Builder.create(this, \"MyCfnHostedZone\")\n        .hostedZoneConfig(HostedZoneConfigProperty.builder()\n                .comment(\"comment\")\n                .build())\n        .hostedZoneTags(List.of(HostedZoneTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .name(\"name\")\n        .queryLoggingConfig(QueryLoggingConfigProperty.builder()\n                .cloudWatchLogsLogGroupArn(\"cloudWatchLogsLogGroupArn\")\n                .build())\n        .vpcs(List.of(VPCProperty.builder()\n                .vpcId(\"vpcId\")\n                .vpcRegion(\"vpcRegion\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnHostedZone := route53.NewCfnHostedZone(this, jsii.String(\"MyCfnHostedZone\"), &cfnHostedZoneProps{\n\thostedZoneConfig: &hostedZoneConfigProperty{\n\t\tcomment: jsii.String(\"comment\"),\n\t},\n\thostedZoneTags: []hostedZoneTagProperty{\n\t\t&hostedZoneTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tqueryLoggingConfig: &queryLoggingConfigProperty{\n\t\tcloudWatchLogsLogGroupArn: jsii.String(\"cloudWatchLogsLogGroupArn\"),\n\t},\n\tvpcs: []interface{}{\n\t\t&vPCProperty{\n\t\t\tvpcId: jsii.String(\"vpcId\"),\n\t\t\tvpcRegion: jsii.String(\"vpcRegion\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnHostedZone = new route53.CfnHostedZone(this, 'MyCfnHostedZone', /* all optional props */ {\n  hostedZoneConfig: {\n    comment: 'comment',\n  },\n  hostedZoneTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  name: 'name',\n  queryLoggingConfig: {\n    cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n  },\n  vpcs: [{\n    vpcId: 'vpcId',\n    vpcRegion: 'vpcRegion',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHostedZone"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHostedZone",
        "@aws-cdk/aws-route53.CfnHostedZoneProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHostedZone = new route53.CfnHostedZone(this, 'MyCfnHostedZone', /* all optional props */ {\n  hostedZoneConfig: {\n    comment: 'comment',\n  },\n  hostedZoneTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  name: 'name',\n  queryLoggingConfig: {\n    cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n  },\n  vpcs: [{\n    vpcId: 'vpcId',\n    vpcRegion: 'vpcRegion',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 15,
        "104": 1,
        "192": 2,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "f80ec8830553467e666398478ac94ebcd831743a4b6cc7628de8a0d8076abb3d"
    },
    "e28cc3c64ca84a8b0f51f2c967a1b34253ee626fc8305b4956b8a5e62167063d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nhosted_zone_config_property = route53.CfnHostedZone.HostedZoneConfigProperty(\n    comment=\"comment\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nHostedZoneConfigProperty hostedZoneConfigProperty = new HostedZoneConfigProperty {\n    Comment = \"comment\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZoneConfigProperty hostedZoneConfigProperty = HostedZoneConfigProperty.builder()\n        .comment(\"comment\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nhostedZoneConfigProperty := &hostedZoneConfigProperty{\n\tcomment: jsii.String(\"comment\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst hostedZoneConfigProperty: route53.CfnHostedZone.HostedZoneConfigProperty = {\n  comment: 'comment',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHostedZone.HostedZoneConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHostedZone.HostedZoneConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hostedZoneConfigProperty: route53.CfnHostedZone.HostedZoneConfigProperty = {\n  comment: 'comment',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c66d4326ef04f6b7b99467983ff657d0378dba735ed279e1e6d40af55e58190d"
    },
    "40709b84ca2407899ced32f3a291ae7f5ca06ed46533d6fee7f088a6df83cdd7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nhosted_zone_tag_property = route53.CfnHostedZone.HostedZoneTagProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nHostedZoneTagProperty hostedZoneTagProperty = new HostedZoneTagProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZoneTagProperty hostedZoneTagProperty = HostedZoneTagProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nhostedZoneTagProperty := &hostedZoneTagProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst hostedZoneTagProperty: route53.CfnHostedZone.HostedZoneTagProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHostedZone.HostedZoneTagProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHostedZone.HostedZoneTagProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hostedZoneTagProperty: route53.CfnHostedZone.HostedZoneTagProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c174766591a4bca9de3d499aef1b7ce8365c0e897539791bba8bbca9f9bd488a"
    },
    "a06b14059c4fc4d1659215c574cb519bab50a11a96ce14dcbbc41132f9fa0c1f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nquery_logging_config_property = route53.CfnHostedZone.QueryLoggingConfigProperty(\n    cloud_watch_logs_log_group_arn=\"cloudWatchLogsLogGroupArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nQueryLoggingConfigProperty queryLoggingConfigProperty = new QueryLoggingConfigProperty {\n    CloudWatchLogsLogGroupArn = \"cloudWatchLogsLogGroupArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nQueryLoggingConfigProperty queryLoggingConfigProperty = QueryLoggingConfigProperty.builder()\n        .cloudWatchLogsLogGroupArn(\"cloudWatchLogsLogGroupArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nqueryLoggingConfigProperty := &queryLoggingConfigProperty{\n\tcloudWatchLogsLogGroupArn: jsii.String(\"cloudWatchLogsLogGroupArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst queryLoggingConfigProperty: route53.CfnHostedZone.QueryLoggingConfigProperty = {\n  cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHostedZone.QueryLoggingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHostedZone.QueryLoggingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst queryLoggingConfigProperty: route53.CfnHostedZone.QueryLoggingConfigProperty = {\n  cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cad1e3a8522a6bf1f3a1ac389c7e63f0e44a00c3d2ac1bdb0eaf5043911cdbbc"
    },
    "e540acbe95dcbbcf310177a8473086df1a7cd5096541bf12467880612260dba0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nv_pCProperty = route53.CfnHostedZone.VPCProperty(\n    vpc_id=\"vpcId\",\n    vpc_region=\"vpcRegion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nVPCProperty vPCProperty = new VPCProperty {\n    VpcId = \"vpcId\",\n    VpcRegion = \"vpcRegion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nVPCProperty vPCProperty = VPCProperty.builder()\n        .vpcId(\"vpcId\")\n        .vpcRegion(\"vpcRegion\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nvPCProperty := &vPCProperty{\n\tvpcId: jsii.String(\"vpcId\"),\n\tvpcRegion: jsii.String(\"vpcRegion\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst vPCProperty: route53.CfnHostedZone.VPCProperty = {\n  vpcId: 'vpcId',\n  vpcRegion: 'vpcRegion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHostedZone.VPCProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHostedZone.VPCProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vPCProperty: route53.CfnHostedZone.VPCProperty = {\n  vpcId: 'vpcId',\n  vpcRegion: 'vpcRegion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9c7c096ecd0f4dcd1d95bd07670a31fc9f43ae7c7a50c130c3990e7ce9461c62"
    },
    "a12a4a3f068ed6f77bd11df29ae13059861687b663eac00ecd30e54b6e252427": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_hosted_zone_props = route53.CfnHostedZoneProps(\n    hosted_zone_config=route53.CfnHostedZone.HostedZoneConfigProperty(\n        comment=\"comment\"\n    ),\n    hosted_zone_tags=[route53.CfnHostedZone.HostedZoneTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    name=\"name\",\n    query_logging_config=route53.CfnHostedZone.QueryLoggingConfigProperty(\n        cloud_watch_logs_log_group_arn=\"cloudWatchLogsLogGroupArn\"\n    ),\n    vpcs=[route53.CfnHostedZone.VPCProperty(\n        vpc_id=\"vpcId\",\n        vpc_region=\"vpcRegion\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnHostedZoneProps cfnHostedZoneProps = new CfnHostedZoneProps {\n    HostedZoneConfig = new HostedZoneConfigProperty {\n        Comment = \"comment\"\n    },\n    HostedZoneTags = new [] { new HostedZoneTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Name = \"name\",\n    QueryLoggingConfig = new QueryLoggingConfigProperty {\n        CloudWatchLogsLogGroupArn = \"cloudWatchLogsLogGroupArn\"\n    },\n    Vpcs = new [] { new VPCProperty {\n        VpcId = \"vpcId\",\n        VpcRegion = \"vpcRegion\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnHostedZoneProps cfnHostedZoneProps = CfnHostedZoneProps.builder()\n        .hostedZoneConfig(HostedZoneConfigProperty.builder()\n                .comment(\"comment\")\n                .build())\n        .hostedZoneTags(List.of(HostedZoneTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .name(\"name\")\n        .queryLoggingConfig(QueryLoggingConfigProperty.builder()\n                .cloudWatchLogsLogGroupArn(\"cloudWatchLogsLogGroupArn\")\n                .build())\n        .vpcs(List.of(VPCProperty.builder()\n                .vpcId(\"vpcId\")\n                .vpcRegion(\"vpcRegion\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnHostedZoneProps := &cfnHostedZoneProps{\n\thostedZoneConfig: &hostedZoneConfigProperty{\n\t\tcomment: jsii.String(\"comment\"),\n\t},\n\thostedZoneTags: []hostedZoneTagProperty{\n\t\t&hostedZoneTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tqueryLoggingConfig: &queryLoggingConfigProperty{\n\t\tcloudWatchLogsLogGroupArn: jsii.String(\"cloudWatchLogsLogGroupArn\"),\n\t},\n\tvpcs: []interface{}{\n\t\t&vPCProperty{\n\t\t\tvpcId: jsii.String(\"vpcId\"),\n\t\t\tvpcRegion: jsii.String(\"vpcRegion\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnHostedZoneProps: route53.CfnHostedZoneProps = {\n  hostedZoneConfig: {\n    comment: 'comment',\n  },\n  hostedZoneTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  name: 'name',\n  queryLoggingConfig: {\n    cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n  },\n  vpcs: [{\n    vpcId: 'vpcId',\n    vpcRegion: 'vpcRegion',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnHostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnHostedZoneProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHostedZoneProps: route53.CfnHostedZoneProps = {\n  hostedZoneConfig: {\n    comment: 'comment',\n  },\n  hostedZoneTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  name: 'name',\n  queryLoggingConfig: {\n    cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n  },\n  vpcs: [{\n    vpcId: 'vpcId',\n    vpcRegion: 'vpcRegion',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 15,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "6b668690d801f2835b5ac589eb3d34f4324e052232b2dc15e56b5f3e1a7255bb"
    },
    "a109820eed17b7ea89107b599b6bb080aeec67f24c12e0334e70116262359bbc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_key_signing_key = route53.CfnKeySigningKey(self, \"MyCfnKeySigningKey\",\n    hosted_zone_id=\"hostedZoneId\",\n    key_management_service_arn=\"keyManagementServiceArn\",\n    name=\"name\",\n    status=\"status\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnKeySigningKey cfnKeySigningKey = new CfnKeySigningKey(this, \"MyCfnKeySigningKey\", new CfnKeySigningKeyProps {\n    HostedZoneId = \"hostedZoneId\",\n    KeyManagementServiceArn = \"keyManagementServiceArn\",\n    Name = \"name\",\n    Status = \"status\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnKeySigningKey cfnKeySigningKey = CfnKeySigningKey.Builder.create(this, \"MyCfnKeySigningKey\")\n        .hostedZoneId(\"hostedZoneId\")\n        .keyManagementServiceArn(\"keyManagementServiceArn\")\n        .name(\"name\")\n        .status(\"status\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnKeySigningKey := route53.NewCfnKeySigningKey(this, jsii.String(\"MyCfnKeySigningKey\"), &cfnKeySigningKeyProps{\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\tkeyManagementServiceArn: jsii.String(\"keyManagementServiceArn\"),\n\tname: jsii.String(\"name\"),\n\tstatus: jsii.String(\"status\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnKeySigningKey = new route53.CfnKeySigningKey(this, 'MyCfnKeySigningKey', {\n  hostedZoneId: 'hostedZoneId',\n  keyManagementServiceArn: 'keyManagementServiceArn',\n  name: 'name',\n  status: 'status',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnKeySigningKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnKeySigningKey",
        "@aws-cdk/aws-route53.CfnKeySigningKeyProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnKeySigningKey = new route53.CfnKeySigningKey(this, 'MyCfnKeySigningKey', {\n  hostedZoneId: 'hostedZoneId',\n  keyManagementServiceArn: 'keyManagementServiceArn',\n  name: 'name',\n  status: 'status',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6dd0f87a8ad8dee1a8b7457e06c5fc5eb37434fca1ebb72a9b3706b7d7733f03"
    },
    "178eb3fec90cdc0605780fa760b0b80b91617fe439eb68ad6b68cf9dfa91412f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_key_signing_key_props = route53.CfnKeySigningKeyProps(\n    hosted_zone_id=\"hostedZoneId\",\n    key_management_service_arn=\"keyManagementServiceArn\",\n    name=\"name\",\n    status=\"status\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnKeySigningKeyProps cfnKeySigningKeyProps = new CfnKeySigningKeyProps {\n    HostedZoneId = \"hostedZoneId\",\n    KeyManagementServiceArn = \"keyManagementServiceArn\",\n    Name = \"name\",\n    Status = \"status\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnKeySigningKeyProps cfnKeySigningKeyProps = CfnKeySigningKeyProps.builder()\n        .hostedZoneId(\"hostedZoneId\")\n        .keyManagementServiceArn(\"keyManagementServiceArn\")\n        .name(\"name\")\n        .status(\"status\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnKeySigningKeyProps := &cfnKeySigningKeyProps{\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\tkeyManagementServiceArn: jsii.String(\"keyManagementServiceArn\"),\n\tname: jsii.String(\"name\"),\n\tstatus: jsii.String(\"status\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnKeySigningKeyProps: route53.CfnKeySigningKeyProps = {\n  hostedZoneId: 'hostedZoneId',\n  keyManagementServiceArn: 'keyManagementServiceArn',\n  name: 'name',\n  status: 'status',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnKeySigningKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnKeySigningKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnKeySigningKeyProps: route53.CfnKeySigningKeyProps = {\n  hostedZoneId: 'hostedZoneId',\n  keyManagementServiceArn: 'keyManagementServiceArn',\n  name: 'name',\n  status: 'status',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "61c3652c3581dd2a3e66d0590a1ef6d2dba470f22ee139e0b2e3299227621d29"
    },
    "1c55f517d20dfea48ca67a55b5b0548009d4f78dd5308f0903bdf1e712a29d0e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_record_set = route53.CfnRecordSet(self, \"MyCfnRecordSet\",\n    name=\"name\",\n    type=\"type\",\n\n    # the properties below are optional\n    alias_target=route53.CfnRecordSet.AliasTargetProperty(\n        dns_name=\"dnsName\",\n        hosted_zone_id=\"hostedZoneId\",\n\n        # the properties below are optional\n        evaluate_target_health=False\n    ),\n    comment=\"comment\",\n    failover=\"failover\",\n    geo_location=route53.CfnRecordSet.GeoLocationProperty(\n        continent_code=\"continentCode\",\n        country_code=\"countryCode\",\n        subdivision_code=\"subdivisionCode\"\n    ),\n    health_check_id=\"healthCheckId\",\n    hosted_zone_id=\"hostedZoneId\",\n    hosted_zone_name=\"hostedZoneName\",\n    multi_value_answer=False,\n    region=\"region\",\n    resource_records=[\"resourceRecords\"],\n    set_identifier=\"setIdentifier\",\n    ttl=\"ttl\",\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnRecordSet cfnRecordSet = new CfnRecordSet(this, \"MyCfnRecordSet\", new CfnRecordSetProps {\n    Name = \"name\",\n    Type = \"type\",\n\n    // the properties below are optional\n    AliasTarget = new AliasTargetProperty {\n        DnsName = \"dnsName\",\n        HostedZoneId = \"hostedZoneId\",\n\n        // the properties below are optional\n        EvaluateTargetHealth = false\n    },\n    Comment = \"comment\",\n    Failover = \"failover\",\n    GeoLocation = new GeoLocationProperty {\n        ContinentCode = \"continentCode\",\n        CountryCode = \"countryCode\",\n        SubdivisionCode = \"subdivisionCode\"\n    },\n    HealthCheckId = \"healthCheckId\",\n    HostedZoneId = \"hostedZoneId\",\n    HostedZoneName = \"hostedZoneName\",\n    MultiValueAnswer = false,\n    Region = \"region\",\n    ResourceRecords = new [] { \"resourceRecords\" },\n    SetIdentifier = \"setIdentifier\",\n    Ttl = \"ttl\",\n    Weight = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnRecordSet cfnRecordSet = CfnRecordSet.Builder.create(this, \"MyCfnRecordSet\")\n        .name(\"name\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .aliasTarget(AliasTargetProperty.builder()\n                .dnsName(\"dnsName\")\n                .hostedZoneId(\"hostedZoneId\")\n\n                // the properties below are optional\n                .evaluateTargetHealth(false)\n                .build())\n        .comment(\"comment\")\n        .failover(\"failover\")\n        .geoLocation(GeoLocationProperty.builder()\n                .continentCode(\"continentCode\")\n                .countryCode(\"countryCode\")\n                .subdivisionCode(\"subdivisionCode\")\n                .build())\n        .healthCheckId(\"healthCheckId\")\n        .hostedZoneId(\"hostedZoneId\")\n        .hostedZoneName(\"hostedZoneName\")\n        .multiValueAnswer(false)\n        .region(\"region\")\n        .resourceRecords(List.of(\"resourceRecords\"))\n        .setIdentifier(\"setIdentifier\")\n        .ttl(\"ttl\")\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnRecordSet := route53.NewCfnRecordSet(this, jsii.String(\"MyCfnRecordSet\"), &cfnRecordSetProps{\n\tname: jsii.String(\"name\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\taliasTarget: &aliasTargetProperty{\n\t\tdnsName: jsii.String(\"dnsName\"),\n\t\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\n\t\t// the properties below are optional\n\t\tevaluateTargetHealth: jsii.Boolean(false),\n\t},\n\tcomment: jsii.String(\"comment\"),\n\tfailover: jsii.String(\"failover\"),\n\tgeoLocation: &geoLocationProperty{\n\t\tcontinentCode: jsii.String(\"continentCode\"),\n\t\tcountryCode: jsii.String(\"countryCode\"),\n\t\tsubdivisionCode: jsii.String(\"subdivisionCode\"),\n\t},\n\thealthCheckId: jsii.String(\"healthCheckId\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\thostedZoneName: jsii.String(\"hostedZoneName\"),\n\tmultiValueAnswer: jsii.Boolean(false),\n\tregion: jsii.String(\"region\"),\n\tresourceRecords: []*string{\n\t\tjsii.String(\"resourceRecords\"),\n\t},\n\tsetIdentifier: jsii.String(\"setIdentifier\"),\n\tttl: jsii.String(\"ttl\"),\n\tweight: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnRecordSet = new route53.CfnRecordSet(this, 'MyCfnRecordSet', {\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  aliasTarget: {\n    dnsName: 'dnsName',\n    hostedZoneId: 'hostedZoneId',\n\n    // the properties below are optional\n    evaluateTargetHealth: false,\n  },\n  comment: 'comment',\n  failover: 'failover',\n  geoLocation: {\n    continentCode: 'continentCode',\n    countryCode: 'countryCode',\n    subdivisionCode: 'subdivisionCode',\n  },\n  healthCheckId: 'healthCheckId',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  multiValueAnswer: false,\n  region: 'region',\n  resourceRecords: ['resourceRecords'],\n  setIdentifier: 'setIdentifier',\n  ttl: 'ttl',\n  weight: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSet",
        "@aws-cdk/aws-route53.CfnRecordSetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRecordSet = new route53.CfnRecordSet(this, 'MyCfnRecordSet', {\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  aliasTarget: {\n    dnsName: 'dnsName',\n    hostedZoneId: 'hostedZoneId',\n\n    // the properties below are optional\n    evaluateTargetHealth: false,\n  },\n  comment: 'comment',\n  failover: 'failover',\n  geoLocation: {\n    continentCode: 'continentCode',\n    countryCode: 'countryCode',\n    subdivisionCode: 'subdivisionCode',\n  },\n  healthCheckId: 'healthCheckId',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  multiValueAnswer: false,\n  region: 'region',\n  resourceRecords: ['resourceRecords'],\n  setIdentifier: 'setIdentifier',\n  ttl: 'ttl',\n  weight: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 18,
        "75": 25,
        "91": 2,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "01a5a195be45d754c9536e511f221947122df8b99e36043d075f7cf1fe4ee3df"
    },
    "0c2451970f3b666c9f3f23155a6775491a97f1b9d916a3e96982163c1c0eb160": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nalias_target_property = route53.CfnRecordSet.AliasTargetProperty(\n    dns_name=\"dnsName\",\n    hosted_zone_id=\"hostedZoneId\",\n\n    # the properties below are optional\n    evaluate_target_health=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nAliasTargetProperty aliasTargetProperty = new AliasTargetProperty {\n    DnsName = \"dnsName\",\n    HostedZoneId = \"hostedZoneId\",\n\n    // the properties below are optional\n    EvaluateTargetHealth = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nAliasTargetProperty aliasTargetProperty = AliasTargetProperty.builder()\n        .dnsName(\"dnsName\")\n        .hostedZoneId(\"hostedZoneId\")\n\n        // the properties below are optional\n        .evaluateTargetHealth(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\naliasTargetProperty := &aliasTargetProperty{\n\tdnsName: jsii.String(\"dnsName\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\n\t// the properties below are optional\n\tevaluateTargetHealth: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst aliasTargetProperty: route53.CfnRecordSet.AliasTargetProperty = {\n  dnsName: 'dnsName',\n  hostedZoneId: 'hostedZoneId',\n\n  // the properties below are optional\n  evaluateTargetHealth: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSet.AliasTargetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSet.AliasTargetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasTargetProperty: route53.CfnRecordSet.AliasTargetProperty = {\n  dnsName: 'dnsName',\n  hostedZoneId: 'hostedZoneId',\n\n  // the properties below are optional\n  evaluateTargetHealth: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a4c4efa4d766cc7c2a2be26ccdaefdc81953ff33ac4e5d6ec760f51a93f8a0ee"
    },
    "3efce4eef6223467d46e5c84c5efd2a46cc730a7cca1472d6b70fd4fbe98dbd8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ngeo_location_property = route53.CfnRecordSet.GeoLocationProperty(\n    continent_code=\"continentCode\",\n    country_code=\"countryCode\",\n    subdivision_code=\"subdivisionCode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nGeoLocationProperty geoLocationProperty = new GeoLocationProperty {\n    ContinentCode = \"continentCode\",\n    CountryCode = \"countryCode\",\n    SubdivisionCode = \"subdivisionCode\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nGeoLocationProperty geoLocationProperty = GeoLocationProperty.builder()\n        .continentCode(\"continentCode\")\n        .countryCode(\"countryCode\")\n        .subdivisionCode(\"subdivisionCode\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ngeoLocationProperty := &geoLocationProperty{\n\tcontinentCode: jsii.String(\"continentCode\"),\n\tcountryCode: jsii.String(\"countryCode\"),\n\tsubdivisionCode: jsii.String(\"subdivisionCode\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst geoLocationProperty: route53.CfnRecordSet.GeoLocationProperty = {\n  continentCode: 'continentCode',\n  countryCode: 'countryCode',\n  subdivisionCode: 'subdivisionCode',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSet.GeoLocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSet.GeoLocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst geoLocationProperty: route53.CfnRecordSet.GeoLocationProperty = {\n  continentCode: 'continentCode',\n  countryCode: 'countryCode',\n  subdivisionCode: 'subdivisionCode',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "88ccf7d77077fec757a140e23f01e17dd69127de4e756158efc497127322b499"
    },
    "1cd8df7782fa57f889348ed0d79a007176b50e8378fd4c4a850831a77c83670f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_record_set_group = route53.CfnRecordSetGroup(self, \"MyCfnRecordSetGroup\",\n    comment=\"comment\",\n    hosted_zone_id=\"hostedZoneId\",\n    hosted_zone_name=\"hostedZoneName\",\n    record_sets=[route53.CfnRecordSetGroup.RecordSetProperty(\n        name=\"name\",\n        type=\"type\",\n\n        # the properties below are optional\n        alias_target=route53.CfnRecordSetGroup.AliasTargetProperty(\n            dns_name=\"dnsName\",\n            hosted_zone_id=\"hostedZoneId\",\n\n            # the properties below are optional\n            evaluate_target_health=False\n        ),\n        failover=\"failover\",\n        geo_location=route53.CfnRecordSetGroup.GeoLocationProperty(\n            continent_code=\"continentCode\",\n            country_code=\"countryCode\",\n            subdivision_code=\"subdivisionCode\"\n        ),\n        health_check_id=\"healthCheckId\",\n        hosted_zone_id=\"hostedZoneId\",\n        hosted_zone_name=\"hostedZoneName\",\n        multi_value_answer=False,\n        region=\"region\",\n        resource_records=[\"resourceRecords\"],\n        set_identifier=\"setIdentifier\",\n        ttl=\"ttl\",\n        weight=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnRecordSetGroup cfnRecordSetGroup = new CfnRecordSetGroup(this, \"MyCfnRecordSetGroup\", new CfnRecordSetGroupProps {\n    Comment = \"comment\",\n    HostedZoneId = \"hostedZoneId\",\n    HostedZoneName = \"hostedZoneName\",\n    RecordSets = new [] { new RecordSetProperty {\n        Name = \"name\",\n        Type = \"type\",\n\n        // the properties below are optional\n        AliasTarget = new AliasTargetProperty {\n            DnsName = \"dnsName\",\n            HostedZoneId = \"hostedZoneId\",\n\n            // the properties below are optional\n            EvaluateTargetHealth = false\n        },\n        Failover = \"failover\",\n        GeoLocation = new GeoLocationProperty {\n            ContinentCode = \"continentCode\",\n            CountryCode = \"countryCode\",\n            SubdivisionCode = \"subdivisionCode\"\n        },\n        HealthCheckId = \"healthCheckId\",\n        HostedZoneId = \"hostedZoneId\",\n        HostedZoneName = \"hostedZoneName\",\n        MultiValueAnswer = false,\n        Region = \"region\",\n        ResourceRecords = new [] { \"resourceRecords\" },\n        SetIdentifier = \"setIdentifier\",\n        Ttl = \"ttl\",\n        Weight = 123\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnRecordSetGroup cfnRecordSetGroup = CfnRecordSetGroup.Builder.create(this, \"MyCfnRecordSetGroup\")\n        .comment(\"comment\")\n        .hostedZoneId(\"hostedZoneId\")\n        .hostedZoneName(\"hostedZoneName\")\n        .recordSets(List.of(RecordSetProperty.builder()\n                .name(\"name\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .aliasTarget(AliasTargetProperty.builder()\n                        .dnsName(\"dnsName\")\n                        .hostedZoneId(\"hostedZoneId\")\n\n                        // the properties below are optional\n                        .evaluateTargetHealth(false)\n                        .build())\n                .failover(\"failover\")\n                .geoLocation(GeoLocationProperty.builder()\n                        .continentCode(\"continentCode\")\n                        .countryCode(\"countryCode\")\n                        .subdivisionCode(\"subdivisionCode\")\n                        .build())\n                .healthCheckId(\"healthCheckId\")\n                .hostedZoneId(\"hostedZoneId\")\n                .hostedZoneName(\"hostedZoneName\")\n                .multiValueAnswer(false)\n                .region(\"region\")\n                .resourceRecords(List.of(\"resourceRecords\"))\n                .setIdentifier(\"setIdentifier\")\n                .ttl(\"ttl\")\n                .weight(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnRecordSetGroup := route53.NewCfnRecordSetGroup(this, jsii.String(\"MyCfnRecordSetGroup\"), &cfnRecordSetGroupProps{\n\tcomment: jsii.String(\"comment\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\thostedZoneName: jsii.String(\"hostedZoneName\"),\n\trecordSets: []interface{}{\n\t\t&recordSetProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\taliasTarget: &aliasTargetProperty{\n\t\t\t\tdnsName: jsii.String(\"dnsName\"),\n\t\t\t\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tevaluateTargetHealth: jsii.Boolean(false),\n\t\t\t},\n\t\t\tfailover: jsii.String(\"failover\"),\n\t\t\tgeoLocation: &geoLocationProperty{\n\t\t\t\tcontinentCode: jsii.String(\"continentCode\"),\n\t\t\t\tcountryCode: jsii.String(\"countryCode\"),\n\t\t\t\tsubdivisionCode: jsii.String(\"subdivisionCode\"),\n\t\t\t},\n\t\t\thealthCheckId: jsii.String(\"healthCheckId\"),\n\t\t\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\t\t\thostedZoneName: jsii.String(\"hostedZoneName\"),\n\t\t\tmultiValueAnswer: jsii.Boolean(false),\n\t\t\tregion: jsii.String(\"region\"),\n\t\t\tresourceRecords: []*string{\n\t\t\t\tjsii.String(\"resourceRecords\"),\n\t\t\t},\n\t\t\tsetIdentifier: jsii.String(\"setIdentifier\"),\n\t\t\tttl: jsii.String(\"ttl\"),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnRecordSetGroup = new route53.CfnRecordSetGroup(this, 'MyCfnRecordSetGroup', /* all optional props */ {\n  comment: 'comment',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  recordSets: [{\n    name: 'name',\n    type: 'type',\n\n    // the properties below are optional\n    aliasTarget: {\n      dnsName: 'dnsName',\n      hostedZoneId: 'hostedZoneId',\n\n      // the properties below are optional\n      evaluateTargetHealth: false,\n    },\n    failover: 'failover',\n    geoLocation: {\n      continentCode: 'continentCode',\n      countryCode: 'countryCode',\n      subdivisionCode: 'subdivisionCode',\n    },\n    healthCheckId: 'healthCheckId',\n    hostedZoneId: 'hostedZoneId',\n    hostedZoneName: 'hostedZoneName',\n    multiValueAnswer: false,\n    region: 'region',\n    resourceRecords: ['resourceRecords'],\n    setIdentifier: 'setIdentifier',\n    ttl: 'ttl',\n    weight: 123,\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSetGroup",
        "@aws-cdk/aws-route53.CfnRecordSetGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRecordSetGroup = new route53.CfnRecordSetGroup(this, 'MyCfnRecordSetGroup', /* all optional props */ {\n  comment: 'comment',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  recordSets: [{\n    name: 'name',\n    type: 'type',\n\n    // the properties below are optional\n    aliasTarget: {\n      dnsName: 'dnsName',\n      hostedZoneId: 'hostedZoneId',\n\n      // the properties below are optional\n      evaluateTargetHealth: false,\n    },\n    failover: 'failover',\n    geoLocation: {\n      continentCode: 'continentCode',\n      countryCode: 'countryCode',\n      subdivisionCode: 'subdivisionCode',\n    },\n    healthCheckId: 'healthCheckId',\n    hostedZoneId: 'hostedZoneId',\n    hostedZoneName: 'hostedZoneName',\n    multiValueAnswer: false,\n    region: 'region',\n    resourceRecords: ['resourceRecords'],\n    setIdentifier: 'setIdentifier',\n    ttl: 'ttl',\n    weight: 123,\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 20,
        "75": 28,
        "91": 2,
        "104": 1,
        "192": 2,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "08b0ef1aefbb681fc507463d7f377f99ff4da2b8b9a8464d954f300fcf488888"
    },
    "814fc0cb8baa5a4083d684429b1da0814037d80863bbad5e3b757036d73900dd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nalias_target_property = route53.CfnRecordSetGroup.AliasTargetProperty(\n    dns_name=\"dnsName\",\n    hosted_zone_id=\"hostedZoneId\",\n\n    # the properties below are optional\n    evaluate_target_health=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nAliasTargetProperty aliasTargetProperty = new AliasTargetProperty {\n    DnsName = \"dnsName\",\n    HostedZoneId = \"hostedZoneId\",\n\n    // the properties below are optional\n    EvaluateTargetHealth = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nAliasTargetProperty aliasTargetProperty = AliasTargetProperty.builder()\n        .dnsName(\"dnsName\")\n        .hostedZoneId(\"hostedZoneId\")\n\n        // the properties below are optional\n        .evaluateTargetHealth(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\naliasTargetProperty := &aliasTargetProperty{\n\tdnsName: jsii.String(\"dnsName\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\n\t// the properties below are optional\n\tevaluateTargetHealth: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst aliasTargetProperty: route53.CfnRecordSetGroup.AliasTargetProperty = {\n  dnsName: 'dnsName',\n  hostedZoneId: 'hostedZoneId',\n\n  // the properties below are optional\n  evaluateTargetHealth: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSetGroup.AliasTargetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSetGroup.AliasTargetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasTargetProperty: route53.CfnRecordSetGroup.AliasTargetProperty = {\n  dnsName: 'dnsName',\n  hostedZoneId: 'hostedZoneId',\n\n  // the properties below are optional\n  evaluateTargetHealth: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "402723a984cf071807604dd5626581058bda3bd4ac7d79ce27e437eb5359231d"
    },
    "d2eb8a023b3d5910b323eaca787f1a6494091aa1d7e8283a85856702367830a0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ngeo_location_property = route53.CfnRecordSetGroup.GeoLocationProperty(\n    continent_code=\"continentCode\",\n    country_code=\"countryCode\",\n    subdivision_code=\"subdivisionCode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nGeoLocationProperty geoLocationProperty = new GeoLocationProperty {\n    ContinentCode = \"continentCode\",\n    CountryCode = \"countryCode\",\n    SubdivisionCode = \"subdivisionCode\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nGeoLocationProperty geoLocationProperty = GeoLocationProperty.builder()\n        .continentCode(\"continentCode\")\n        .countryCode(\"countryCode\")\n        .subdivisionCode(\"subdivisionCode\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ngeoLocationProperty := &geoLocationProperty{\n\tcontinentCode: jsii.String(\"continentCode\"),\n\tcountryCode: jsii.String(\"countryCode\"),\n\tsubdivisionCode: jsii.String(\"subdivisionCode\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst geoLocationProperty: route53.CfnRecordSetGroup.GeoLocationProperty = {\n  continentCode: 'continentCode',\n  countryCode: 'countryCode',\n  subdivisionCode: 'subdivisionCode',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSetGroup.GeoLocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSetGroup.GeoLocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst geoLocationProperty: route53.CfnRecordSetGroup.GeoLocationProperty = {\n  continentCode: 'continentCode',\n  countryCode: 'countryCode',\n  subdivisionCode: 'subdivisionCode',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "53c722b940c2667a2854d9e5cd58b54f0a7a1e24c31f5be1264533af4ec695a4"
    },
    "bee81e063359fd0b812f460552392ef7c4a87838b4a29539ea204bf1f314577f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nrecord_set_property = route53.CfnRecordSetGroup.RecordSetProperty(\n    name=\"name\",\n    type=\"type\",\n\n    # the properties below are optional\n    alias_target=route53.CfnRecordSetGroup.AliasTargetProperty(\n        dns_name=\"dnsName\",\n        hosted_zone_id=\"hostedZoneId\",\n\n        # the properties below are optional\n        evaluate_target_health=False\n    ),\n    failover=\"failover\",\n    geo_location=route53.CfnRecordSetGroup.GeoLocationProperty(\n        continent_code=\"continentCode\",\n        country_code=\"countryCode\",\n        subdivision_code=\"subdivisionCode\"\n    ),\n    health_check_id=\"healthCheckId\",\n    hosted_zone_id=\"hostedZoneId\",\n    hosted_zone_name=\"hostedZoneName\",\n    multi_value_answer=False,\n    region=\"region\",\n    resource_records=[\"resourceRecords\"],\n    set_identifier=\"setIdentifier\",\n    ttl=\"ttl\",\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nRecordSetProperty recordSetProperty = new RecordSetProperty {\n    Name = \"name\",\n    Type = \"type\",\n\n    // the properties below are optional\n    AliasTarget = new AliasTargetProperty {\n        DnsName = \"dnsName\",\n        HostedZoneId = \"hostedZoneId\",\n\n        // the properties below are optional\n        EvaluateTargetHealth = false\n    },\n    Failover = \"failover\",\n    GeoLocation = new GeoLocationProperty {\n        ContinentCode = \"continentCode\",\n        CountryCode = \"countryCode\",\n        SubdivisionCode = \"subdivisionCode\"\n    },\n    HealthCheckId = \"healthCheckId\",\n    HostedZoneId = \"hostedZoneId\",\n    HostedZoneName = \"hostedZoneName\",\n    MultiValueAnswer = false,\n    Region = \"region\",\n    ResourceRecords = new [] { \"resourceRecords\" },\n    SetIdentifier = \"setIdentifier\",\n    Ttl = \"ttl\",\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nRecordSetProperty recordSetProperty = RecordSetProperty.builder()\n        .name(\"name\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .aliasTarget(AliasTargetProperty.builder()\n                .dnsName(\"dnsName\")\n                .hostedZoneId(\"hostedZoneId\")\n\n                // the properties below are optional\n                .evaluateTargetHealth(false)\n                .build())\n        .failover(\"failover\")\n        .geoLocation(GeoLocationProperty.builder()\n                .continentCode(\"continentCode\")\n                .countryCode(\"countryCode\")\n                .subdivisionCode(\"subdivisionCode\")\n                .build())\n        .healthCheckId(\"healthCheckId\")\n        .hostedZoneId(\"hostedZoneId\")\n        .hostedZoneName(\"hostedZoneName\")\n        .multiValueAnswer(false)\n        .region(\"region\")\n        .resourceRecords(List.of(\"resourceRecords\"))\n        .setIdentifier(\"setIdentifier\")\n        .ttl(\"ttl\")\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nrecordSetProperty := &recordSetProperty{\n\tname: jsii.String(\"name\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\taliasTarget: &aliasTargetProperty{\n\t\tdnsName: jsii.String(\"dnsName\"),\n\t\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\n\t\t// the properties below are optional\n\t\tevaluateTargetHealth: jsii.Boolean(false),\n\t},\n\tfailover: jsii.String(\"failover\"),\n\tgeoLocation: &geoLocationProperty{\n\t\tcontinentCode: jsii.String(\"continentCode\"),\n\t\tcountryCode: jsii.String(\"countryCode\"),\n\t\tsubdivisionCode: jsii.String(\"subdivisionCode\"),\n\t},\n\thealthCheckId: jsii.String(\"healthCheckId\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\thostedZoneName: jsii.String(\"hostedZoneName\"),\n\tmultiValueAnswer: jsii.Boolean(false),\n\tregion: jsii.String(\"region\"),\n\tresourceRecords: []*string{\n\t\tjsii.String(\"resourceRecords\"),\n\t},\n\tsetIdentifier: jsii.String(\"setIdentifier\"),\n\tttl: jsii.String(\"ttl\"),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst recordSetProperty: route53.CfnRecordSetGroup.RecordSetProperty = {\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  aliasTarget: {\n    dnsName: 'dnsName',\n    hostedZoneId: 'hostedZoneId',\n\n    // the properties below are optional\n    evaluateTargetHealth: false,\n  },\n  failover: 'failover',\n  geoLocation: {\n    continentCode: 'continentCode',\n    countryCode: 'countryCode',\n    subdivisionCode: 'subdivisionCode',\n  },\n  healthCheckId: 'healthCheckId',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  multiValueAnswer: false,\n  region: 'region',\n  resourceRecords: ['resourceRecords'],\n  setIdentifier: 'setIdentifier',\n  ttl: 'ttl',\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSetGroup.RecordSetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSetGroup.RecordSetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst recordSetProperty: route53.CfnRecordSetGroup.RecordSetProperty = {\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  aliasTarget: {\n    dnsName: 'dnsName',\n    hostedZoneId: 'hostedZoneId',\n\n    // the properties below are optional\n    evaluateTargetHealth: false,\n  },\n  failover: 'failover',\n  geoLocation: {\n    continentCode: 'continentCode',\n    countryCode: 'countryCode',\n    subdivisionCode: 'subdivisionCode',\n  },\n  healthCheckId: 'healthCheckId',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  multiValueAnswer: false,\n  region: 'region',\n  resourceRecords: ['resourceRecords'],\n  setIdentifier: 'setIdentifier',\n  ttl: 'ttl',\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 16,
        "75": 25,
        "91": 2,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "66c38bcc9ac2d1b69cbe0703496e555c8e67e2e409fabca92a49b762ef73e11a"
    },
    "deb7e4577fd6a405d94603d41c0e8a819f02fe93958fda0429a4b242c7e467bc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_record_set_group_props = route53.CfnRecordSetGroupProps(\n    comment=\"comment\",\n    hosted_zone_id=\"hostedZoneId\",\n    hosted_zone_name=\"hostedZoneName\",\n    record_sets=[route53.CfnRecordSetGroup.RecordSetProperty(\n        name=\"name\",\n        type=\"type\",\n\n        # the properties below are optional\n        alias_target=route53.CfnRecordSetGroup.AliasTargetProperty(\n            dns_name=\"dnsName\",\n            hosted_zone_id=\"hostedZoneId\",\n\n            # the properties below are optional\n            evaluate_target_health=False\n        ),\n        failover=\"failover\",\n        geo_location=route53.CfnRecordSetGroup.GeoLocationProperty(\n            continent_code=\"continentCode\",\n            country_code=\"countryCode\",\n            subdivision_code=\"subdivisionCode\"\n        ),\n        health_check_id=\"healthCheckId\",\n        hosted_zone_id=\"hostedZoneId\",\n        hosted_zone_name=\"hostedZoneName\",\n        multi_value_answer=False,\n        region=\"region\",\n        resource_records=[\"resourceRecords\"],\n        set_identifier=\"setIdentifier\",\n        ttl=\"ttl\",\n        weight=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnRecordSetGroupProps cfnRecordSetGroupProps = new CfnRecordSetGroupProps {\n    Comment = \"comment\",\n    HostedZoneId = \"hostedZoneId\",\n    HostedZoneName = \"hostedZoneName\",\n    RecordSets = new [] { new RecordSetProperty {\n        Name = \"name\",\n        Type = \"type\",\n\n        // the properties below are optional\n        AliasTarget = new AliasTargetProperty {\n            DnsName = \"dnsName\",\n            HostedZoneId = \"hostedZoneId\",\n\n            // the properties below are optional\n            EvaluateTargetHealth = false\n        },\n        Failover = \"failover\",\n        GeoLocation = new GeoLocationProperty {\n            ContinentCode = \"continentCode\",\n            CountryCode = \"countryCode\",\n            SubdivisionCode = \"subdivisionCode\"\n        },\n        HealthCheckId = \"healthCheckId\",\n        HostedZoneId = \"hostedZoneId\",\n        HostedZoneName = \"hostedZoneName\",\n        MultiValueAnswer = false,\n        Region = \"region\",\n        ResourceRecords = new [] { \"resourceRecords\" },\n        SetIdentifier = \"setIdentifier\",\n        Ttl = \"ttl\",\n        Weight = 123\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnRecordSetGroupProps cfnRecordSetGroupProps = CfnRecordSetGroupProps.builder()\n        .comment(\"comment\")\n        .hostedZoneId(\"hostedZoneId\")\n        .hostedZoneName(\"hostedZoneName\")\n        .recordSets(List.of(RecordSetProperty.builder()\n                .name(\"name\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .aliasTarget(AliasTargetProperty.builder()\n                        .dnsName(\"dnsName\")\n                        .hostedZoneId(\"hostedZoneId\")\n\n                        // the properties below are optional\n                        .evaluateTargetHealth(false)\n                        .build())\n                .failover(\"failover\")\n                .geoLocation(GeoLocationProperty.builder()\n                        .continentCode(\"continentCode\")\n                        .countryCode(\"countryCode\")\n                        .subdivisionCode(\"subdivisionCode\")\n                        .build())\n                .healthCheckId(\"healthCheckId\")\n                .hostedZoneId(\"hostedZoneId\")\n                .hostedZoneName(\"hostedZoneName\")\n                .multiValueAnswer(false)\n                .region(\"region\")\n                .resourceRecords(List.of(\"resourceRecords\"))\n                .setIdentifier(\"setIdentifier\")\n                .ttl(\"ttl\")\n                .weight(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnRecordSetGroupProps := &cfnRecordSetGroupProps{\n\tcomment: jsii.String(\"comment\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\thostedZoneName: jsii.String(\"hostedZoneName\"),\n\trecordSets: []interface{}{\n\t\t&recordSetProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\taliasTarget: &aliasTargetProperty{\n\t\t\t\tdnsName: jsii.String(\"dnsName\"),\n\t\t\t\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tevaluateTargetHealth: jsii.Boolean(false),\n\t\t\t},\n\t\t\tfailover: jsii.String(\"failover\"),\n\t\t\tgeoLocation: &geoLocationProperty{\n\t\t\t\tcontinentCode: jsii.String(\"continentCode\"),\n\t\t\t\tcountryCode: jsii.String(\"countryCode\"),\n\t\t\t\tsubdivisionCode: jsii.String(\"subdivisionCode\"),\n\t\t\t},\n\t\t\thealthCheckId: jsii.String(\"healthCheckId\"),\n\t\t\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\t\t\thostedZoneName: jsii.String(\"hostedZoneName\"),\n\t\t\tmultiValueAnswer: jsii.Boolean(false),\n\t\t\tregion: jsii.String(\"region\"),\n\t\t\tresourceRecords: []*string{\n\t\t\t\tjsii.String(\"resourceRecords\"),\n\t\t\t},\n\t\t\tsetIdentifier: jsii.String(\"setIdentifier\"),\n\t\t\tttl: jsii.String(\"ttl\"),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnRecordSetGroupProps: route53.CfnRecordSetGroupProps = {\n  comment: 'comment',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  recordSets: [{\n    name: 'name',\n    type: 'type',\n\n    // the properties below are optional\n    aliasTarget: {\n      dnsName: 'dnsName',\n      hostedZoneId: 'hostedZoneId',\n\n      // the properties below are optional\n      evaluateTargetHealth: false,\n    },\n    failover: 'failover',\n    geoLocation: {\n      continentCode: 'continentCode',\n      countryCode: 'countryCode',\n      subdivisionCode: 'subdivisionCode',\n    },\n    healthCheckId: 'healthCheckId',\n    hostedZoneId: 'hostedZoneId',\n    hostedZoneName: 'hostedZoneName',\n    multiValueAnswer: false,\n    region: 'region',\n    resourceRecords: ['resourceRecords'],\n    setIdentifier: 'setIdentifier',\n    ttl: 'ttl',\n    weight: 123,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSetGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRecordSetGroupProps: route53.CfnRecordSetGroupProps = {\n  comment: 'comment',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  recordSets: [{\n    name: 'name',\n    type: 'type',\n\n    // the properties below are optional\n    aliasTarget: {\n      dnsName: 'dnsName',\n      hostedZoneId: 'hostedZoneId',\n\n      // the properties below are optional\n      evaluateTargetHealth: false,\n    },\n    failover: 'failover',\n    geoLocation: {\n      continentCode: 'continentCode',\n      countryCode: 'countryCode',\n      subdivisionCode: 'subdivisionCode',\n    },\n    healthCheckId: 'healthCheckId',\n    hostedZoneId: 'hostedZoneId',\n    hostedZoneName: 'hostedZoneName',\n    multiValueAnswer: false,\n    region: 'region',\n    resourceRecords: ['resourceRecords'],\n    setIdentifier: 'setIdentifier',\n    ttl: 'ttl',\n    weight: 123,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 19,
        "75": 28,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "dae3cbd0ca603b30b4444dca4f2e555e04cbde39199755ac602e578b1d9af28c"
    },
    "b3a4f502a4f12302aabcf605084a5a1446ada8e5205852bf505ef963fbf8b080": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncfn_record_set_props = route53.CfnRecordSetProps(\n    name=\"name\",\n    type=\"type\",\n\n    # the properties below are optional\n    alias_target=route53.CfnRecordSet.AliasTargetProperty(\n        dns_name=\"dnsName\",\n        hosted_zone_id=\"hostedZoneId\",\n\n        # the properties below are optional\n        evaluate_target_health=False\n    ),\n    comment=\"comment\",\n    failover=\"failover\",\n    geo_location=route53.CfnRecordSet.GeoLocationProperty(\n        continent_code=\"continentCode\",\n        country_code=\"countryCode\",\n        subdivision_code=\"subdivisionCode\"\n    ),\n    health_check_id=\"healthCheckId\",\n    hosted_zone_id=\"hostedZoneId\",\n    hosted_zone_name=\"hostedZoneName\",\n    multi_value_answer=False,\n    region=\"region\",\n    resource_records=[\"resourceRecords\"],\n    set_identifier=\"setIdentifier\",\n    ttl=\"ttl\",\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCfnRecordSetProps cfnRecordSetProps = new CfnRecordSetProps {\n    Name = \"name\",\n    Type = \"type\",\n\n    // the properties below are optional\n    AliasTarget = new AliasTargetProperty {\n        DnsName = \"dnsName\",\n        HostedZoneId = \"hostedZoneId\",\n\n        // the properties below are optional\n        EvaluateTargetHealth = false\n    },\n    Comment = \"comment\",\n    Failover = \"failover\",\n    GeoLocation = new GeoLocationProperty {\n        ContinentCode = \"continentCode\",\n        CountryCode = \"countryCode\",\n        SubdivisionCode = \"subdivisionCode\"\n    },\n    HealthCheckId = \"healthCheckId\",\n    HostedZoneId = \"hostedZoneId\",\n    HostedZoneName = \"hostedZoneName\",\n    MultiValueAnswer = false,\n    Region = \"region\",\n    ResourceRecords = new [] { \"resourceRecords\" },\n    SetIdentifier = \"setIdentifier\",\n    Ttl = \"ttl\",\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCfnRecordSetProps cfnRecordSetProps = CfnRecordSetProps.builder()\n        .name(\"name\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .aliasTarget(AliasTargetProperty.builder()\n                .dnsName(\"dnsName\")\n                .hostedZoneId(\"hostedZoneId\")\n\n                // the properties below are optional\n                .evaluateTargetHealth(false)\n                .build())\n        .comment(\"comment\")\n        .failover(\"failover\")\n        .geoLocation(GeoLocationProperty.builder()\n                .continentCode(\"continentCode\")\n                .countryCode(\"countryCode\")\n                .subdivisionCode(\"subdivisionCode\")\n                .build())\n        .healthCheckId(\"healthCheckId\")\n        .hostedZoneId(\"hostedZoneId\")\n        .hostedZoneName(\"hostedZoneName\")\n        .multiValueAnswer(false)\n        .region(\"region\")\n        .resourceRecords(List.of(\"resourceRecords\"))\n        .setIdentifier(\"setIdentifier\")\n        .ttl(\"ttl\")\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncfnRecordSetProps := &cfnRecordSetProps{\n\tname: jsii.String(\"name\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\taliasTarget: &aliasTargetProperty{\n\t\tdnsName: jsii.String(\"dnsName\"),\n\t\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\n\t\t// the properties below are optional\n\t\tevaluateTargetHealth: jsii.Boolean(false),\n\t},\n\tcomment: jsii.String(\"comment\"),\n\tfailover: jsii.String(\"failover\"),\n\tgeoLocation: &geoLocationProperty{\n\t\tcontinentCode: jsii.String(\"continentCode\"),\n\t\tcountryCode: jsii.String(\"countryCode\"),\n\t\tsubdivisionCode: jsii.String(\"subdivisionCode\"),\n\t},\n\thealthCheckId: jsii.String(\"healthCheckId\"),\n\thostedZoneId: jsii.String(\"hostedZoneId\"),\n\thostedZoneName: jsii.String(\"hostedZoneName\"),\n\tmultiValueAnswer: jsii.Boolean(false),\n\tregion: jsii.String(\"region\"),\n\tresourceRecords: []*string{\n\t\tjsii.String(\"resourceRecords\"),\n\t},\n\tsetIdentifier: jsii.String(\"setIdentifier\"),\n\tttl: jsii.String(\"ttl\"),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst cfnRecordSetProps: route53.CfnRecordSetProps = {\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  aliasTarget: {\n    dnsName: 'dnsName',\n    hostedZoneId: 'hostedZoneId',\n\n    // the properties below are optional\n    evaluateTargetHealth: false,\n  },\n  comment: 'comment',\n  failover: 'failover',\n  geoLocation: {\n    continentCode: 'continentCode',\n    countryCode: 'countryCode',\n    subdivisionCode: 'subdivisionCode',\n  },\n  healthCheckId: 'healthCheckId',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  multiValueAnswer: false,\n  region: 'region',\n  resourceRecords: ['resourceRecords'],\n  setIdentifier: 'setIdentifier',\n  ttl: 'ttl',\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CfnRecordSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CfnRecordSetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRecordSetProps: route53.CfnRecordSetProps = {\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  aliasTarget: {\n    dnsName: 'dnsName',\n    hostedZoneId: 'hostedZoneId',\n\n    // the properties below are optional\n    evaluateTargetHealth: false,\n  },\n  comment: 'comment',\n  failover: 'failover',\n  geoLocation: {\n    continentCode: 'continentCode',\n    countryCode: 'countryCode',\n    subdivisionCode: 'subdivisionCode',\n  },\n  healthCheckId: 'healthCheckId',\n  hostedZoneId: 'hostedZoneId',\n  hostedZoneName: 'hostedZoneName',\n  multiValueAnswer: false,\n  region: 'region',\n  resourceRecords: ['resourceRecords'],\n  setIdentifier: 'setIdentifier',\n  ttl: 'ttl',\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 17,
        "75": 25,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "f07bf22501364aa81b4a728a43766b60d9713efabbf76670b229ba3c2d6e0c34"
    },
    "5a5795f0e8005dd5aa56c0d0c8358cd16dd7ff23609da129af6215f83113e2b9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted zone and route53 features\n# hosted_zone_id: str\nzone_name = \"example.com\"\n\n\nmy_domain_name = \"api.example.com\"\ncertificate = acm.Certificate(self, \"cert\", domain_name=my_domain_name)\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    domain_name=appsync.DomainOptions(\n        certificate=certificate,\n        domain_name=my_domain_name\n    )\n)\n\n# hosted zone for adding appsync domain\nzone = route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n    hosted_zone_id=hosted_zone_id,\n    zone_name=zone_name\n)\n\n# create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.CnameRecord(self, \"CnameApiRecord\",\n    record_name=\"api\",\n    zone=zone,\n    domain_name=my_domain_name\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\n// hosted zone and route53 features\nstring hostedZoneId;\nstring zoneName = \"example.com\";\n\n\nstring myDomainName = \"api.example.com\";\nCertificate certificate = new Certificate(this, \"cert\", new CertificateProps { DomainName = myDomainName });\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    DomainName = new DomainOptions {\n        Certificate = certificate,\n        DomainName = myDomainName\n    }\n});\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n    HostedZoneId = hostedZoneId,\n    ZoneName = zoneName\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew CnameRecord(this, \"CnameApiRecord\", new CnameRecordProps {\n    RecordName = \"api\",\n    Zone = zone,\n    DomainName = myDomainName\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\n// hosted zone and route53 features\nString hostedZoneId;\nString zoneName = \"example.com\";\n\n\nString myDomainName = \"api.example.com\";\nCertificate certificate = Certificate.Builder.create(this, \"cert\").domainName(myDomainName).build();\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .domainName(DomainOptions.builder()\n                .certificate(certificate)\n                .domainName(myDomainName)\n                .build())\n        .build();\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n        .hostedZoneId(hostedZoneId)\n        .zoneName(zoneName)\n        .build());\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nCnameRecord.Builder.create(this, \"CnameApiRecord\")\n        .recordName(\"api\")\n        .zone(zone)\n        .domainName(myDomainName)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\n// hosted zone and route53 features\nvar hostedZoneId string\nzoneName := \"example.com\"\n\nmyDomainName := \"api.example.com\"\ncertificate := acm.NewCertificate(this, jsii.String(\"cert\"), &certificateProps{\n\tdomainName: myDomainName,\n})\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tdomainName: &domainOptions{\n\t\tcertificate: certificate,\n\t\tdomainName: myDomainName,\n\t},\n})\n\n// hosted zone for adding appsync domain\nzone := route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"HostedZone\"), &hostedZoneAttributes{\n\thostedZoneId: jsii.String(hostedZoneId),\n\tzoneName: jsii.String(zoneName),\n})\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.NewCnameRecord(this, jsii.String(\"CnameApiRecord\"), &cnameRecordProps{\n\trecordName: jsii.String(\"api\"),\n\tzone: zone,\n\tdomainName: myDomainName,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CnameRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.DomainOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-route53.CnameRecord",
        "@aws-cdk/aws-route53.CnameRecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 2,
        "75": 30,
        "104": 4,
        "130": 2,
        "143": 1,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "d0e3ffe2a4bb6d74322d6432d5b5a4cc58954d9defc2074783f2784562218eb6"
    },
    "2858418681a5b6843e5c675ab396a7909eaa01eb41e9fce377e21436bcd7d2ba": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted zone and route53 features\n# hosted_zone_id: str\nzone_name = \"example.com\"\n\n\nmy_domain_name = \"api.example.com\"\ncertificate = acm.Certificate(self, \"cert\", domain_name=my_domain_name)\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    domain_name=appsync.DomainOptions(\n        certificate=certificate,\n        domain_name=my_domain_name\n    )\n)\n\n# hosted zone for adding appsync domain\nzone = route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n    hosted_zone_id=hosted_zone_id,\n    zone_name=zone_name\n)\n\n# create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.CnameRecord(self, \"CnameApiRecord\",\n    record_name=\"api\",\n    zone=zone,\n    domain_name=my_domain_name\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\n// hosted zone and route53 features\nstring hostedZoneId;\nstring zoneName = \"example.com\";\n\n\nstring myDomainName = \"api.example.com\";\nCertificate certificate = new Certificate(this, \"cert\", new CertificateProps { DomainName = myDomainName });\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    DomainName = new DomainOptions {\n        Certificate = certificate,\n        DomainName = myDomainName\n    }\n});\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n    HostedZoneId = hostedZoneId,\n    ZoneName = zoneName\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew CnameRecord(this, \"CnameApiRecord\", new CnameRecordProps {\n    RecordName = \"api\",\n    Zone = zone,\n    DomainName = myDomainName\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\n// hosted zone and route53 features\nString hostedZoneId;\nString zoneName = \"example.com\";\n\n\nString myDomainName = \"api.example.com\";\nCertificate certificate = Certificate.Builder.create(this, \"cert\").domainName(myDomainName).build();\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .domainName(DomainOptions.builder()\n                .certificate(certificate)\n                .domainName(myDomainName)\n                .build())\n        .build();\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n        .hostedZoneId(hostedZoneId)\n        .zoneName(zoneName)\n        .build());\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nCnameRecord.Builder.create(this, \"CnameApiRecord\")\n        .recordName(\"api\")\n        .zone(zone)\n        .domainName(myDomainName)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\n// hosted zone and route53 features\nvar hostedZoneId string\nzoneName := \"example.com\"\n\nmyDomainName := \"api.example.com\"\ncertificate := acm.NewCertificate(this, jsii.String(\"cert\"), &certificateProps{\n\tdomainName: myDomainName,\n})\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tdomainName: &domainOptions{\n\t\tcertificate: certificate,\n\t\tdomainName: myDomainName,\n\t},\n})\n\n// hosted zone for adding appsync domain\nzone := route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"HostedZone\"), &hostedZoneAttributes{\n\thostedZoneId: jsii.String(hostedZoneId),\n\tzoneName: jsii.String(zoneName),\n})\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.NewCnameRecord(this, jsii.String(\"CnameApiRecord\"), &cnameRecordProps{\n\trecordName: jsii.String(\"api\"),\n\tzone: zone,\n\tdomainName: myDomainName,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CnameRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.DomainOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-route53.CnameRecord",
        "@aws-cdk/aws-route53.CnameRecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 2,
        "75": 30,
        "104": 4,
        "130": 2,
        "143": 1,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "d0e3ffe2a4bb6d74322d6432d5b5a4cc58954d9defc2074783f2784562218eb6"
    },
    "f432a9d6e16bb9eaee5c28e441f48db3d8ea7b4582c3118dc8bf8ea78e2c8bbe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\ncommon_hosted_zone_props = route53.CommonHostedZoneProps(\n    zone_name=\"zoneName\",\n\n    # the properties below are optional\n    comment=\"comment\",\n    query_logs_log_group_arn=\"queryLogsLogGroupArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nCommonHostedZoneProps commonHostedZoneProps = new CommonHostedZoneProps {\n    ZoneName = \"zoneName\",\n\n    // the properties below are optional\n    Comment = \"comment\",\n    QueryLogsLogGroupArn = \"queryLogsLogGroupArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nCommonHostedZoneProps commonHostedZoneProps = CommonHostedZoneProps.builder()\n        .zoneName(\"zoneName\")\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .queryLogsLogGroupArn(\"queryLogsLogGroupArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\ncommonHostedZoneProps := &commonHostedZoneProps{\n\tzoneName: jsii.String(\"zoneName\"),\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\tqueryLogsLogGroupArn: jsii.String(\"queryLogsLogGroupArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst commonHostedZoneProps: route53.CommonHostedZoneProps = {\n  zoneName: 'zoneName',\n\n  // the properties below are optional\n  comment: 'comment',\n  queryLogsLogGroupArn: 'queryLogsLogGroupArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CommonHostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.CommonHostedZoneProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonHostedZoneProps: route53.CommonHostedZoneProps = {\n  zoneName: 'zoneName',\n\n  // the properties below are optional\n  comment: 'comment',\n  queryLogsLogGroupArn: 'queryLogsLogGroupArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8c9783f61f9e6aec6a552b88182c72d093d0ee05e696d9cf8817b76195125e59"
    },
    "8ea3cd37e28d0972ffdc1473b539763cee3b675a0c90508f7554e62c81928f3b": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "subZone := route53.NewPublicHostedZone(this, jsii.String(\"SubZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"sub.someexample.com\"),\n})\n\n// import the delegation role by constructing the roleArn\ndelegationRoleArn := stack.of(this).formatArn(&arnComponents{\n\tregion: jsii.String(\"\"),\n\t // IAM is global in each partition\n\tservice: jsii.String(\"iam\"),\n\taccount: jsii.String(\"parent-account-id\"),\n\tresource: jsii.String(\"role\"),\n\tresourceName: jsii.String(\"MyDelegationRole\"),\n})\ndelegationRole := iam.role.fromRoleArn(this, jsii.String(\"DelegationRole\"), delegationRoleArn)\n\n// create the record\n// create the record\nroute53.NewCrossAccountZoneDelegationRecord(this, jsii.String(\"delegate\"), &crossAccountZoneDelegationRecordProps{\n\tdelegatedZone: subZone,\n\tparentHostedZoneName: jsii.String(\"someexample.com\"),\n\t // or you can use parentHostedZoneId\n\tdelegationRole: delegationRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "7c43b3aedbf7f0e90e52096e32ad91f7aacf58567764dae6f5aa62ff741a9545"
    },
    "821cca2d9c024a20e89a231560ed4d58d10dc86bfa4aeb52c72b6d95512f8034": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "subZone := route53.NewPublicHostedZone(this, jsii.String(\"SubZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"sub.someexample.com\"),\n})\n\n// import the delegation role by constructing the roleArn\ndelegationRoleArn := stack.of(this).formatArn(&arnComponents{\n\tregion: jsii.String(\"\"),\n\t // IAM is global in each partition\n\tservice: jsii.String(\"iam\"),\n\taccount: jsii.String(\"parent-account-id\"),\n\tresource: jsii.String(\"role\"),\n\tresourceName: jsii.String(\"MyDelegationRole\"),\n})\ndelegationRole := iam.role.fromRoleArn(this, jsii.String(\"DelegationRole\"), delegationRoleArn)\n\n// create the record\n// create the record\nroute53.NewCrossAccountZoneDelegationRecord(this, jsii.String(\"delegate\"), &crossAccountZoneDelegationRecordProps{\n\tdelegatedZone: subZone,\n\tparentHostedZoneName: jsii.String(\"someexample.com\"),\n\t // or you can use parentHostedZoneId\n\tdelegationRole: delegationRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "7c43b3aedbf7f0e90e52096e32ad91f7aacf58567764dae6f5aa62ff741a9545"
    },
    "7dd26f066b01075ed274ccbdbe4f5a441000cb0b86d33206aba359df3ae41041": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.DsRecord(self, \"DSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"12345 3 1 123456789abcdef67890123456789abcdef67890\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew DsRecord(this, \"DSRecord\", new DsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"12345 3 1 123456789abcdef67890123456789abcdef67890\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nDsRecord.Builder.create(this, \"DSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewDsRecord(this, jsii.String(\"DSRecord\"), &dsRecordProps{\n\tzone: myZone,\n\trecordName: jsii.String(\"foo\"),\n\tvalues: []*string{\n\t\tjsii.String(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"),\n\t},\n\tttl: duration.minutes(jsii.Number(90)),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.DsRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.DsRecord",
        "@aws-cdk/aws-route53.DsRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "184040bfbcdc34705ad8615c6683c3b7a47b796367cfbeafb4e3489a5a5ec19d"
    },
    "36cd116cf0e7e97401b692efc4bdf26e308ea91cd53482f28e25940ec52f74e2": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.DsRecord(self, \"DSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"12345 3 1 123456789abcdef67890123456789abcdef67890\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew DsRecord(this, \"DSRecord\", new DsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"12345 3 1 123456789abcdef67890123456789abcdef67890\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nDsRecord.Builder.create(this, \"DSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewDsRecord(this, jsii.String(\"DSRecord\"), &dsRecordProps{\n\tzone: myZone,\n\trecordName: jsii.String(\"foo\"),\n\tvalues: []*string{\n\t\tjsii.String(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"),\n\t},\n\tttl: duration.minutes(jsii.Number(90)),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.DsRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.DsRecord",
        "@aws-cdk/aws-route53.DsRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "184040bfbcdc34705ad8615c6683c3b7a47b796367cfbeafb4e3489a5a5ec19d"
    },
    "771f967b968e8084fd6e6520fda88bec6f19ab12bd0a90518e45d0886bee46be": {
      "translations": {
        "python": {
          "source": "hosted_zone = route53.HostedZone(self, \"MyHostedZone\", zone_name=\"example.org\")\nmetric = cloudwatch.Metric(\n    namespace=\"AWS/Route53\",\n    metric_name=\"DNSQueries\",\n    dimensions_map={\n        \"HostedZoneId\": hosted_zone.hosted_zone_id\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone hostedZone = new HostedZone(this, \"MyHostedZone\", new HostedZoneProps { ZoneName = \"example.org\" });\nMetric metric = new Metric(new MetricProps {\n    Namespace = \"AWS/Route53\",\n    MetricName = \"DNSQueries\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"HostedZoneId\", hostedZone.HostedZoneId }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone hostedZone = HostedZone.Builder.create(this, \"MyHostedZone\").zoneName(\"example.org\").build();\nMetric metric = Metric.Builder.create()\n        .namespace(\"AWS/Route53\")\n        .metricName(\"DNSQueries\")\n        .dimensionsMap(Map.of(\n                \"HostedZoneId\", hostedZone.getHostedZoneId()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "hostedZone := route53.NewHostedZone(this, jsii.String(\"MyHostedZone\"), &hostedZoneProps{\n\tzoneName: jsii.String(\"example.org\"),\n})\nmetric := cloudwatch.NewMetric(&metricProps{\n\tnamespace: jsii.String(\"AWS/Route53\"),\n\tmetricName: jsii.String(\"DNSQueries\"),\n\tdimensionsMap: map[string]*string{\n\t\t\"HostedZoneId\": hostedZone.hostedZoneId,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZone"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#hostedZoneId",
        "@aws-cdk/aws-route53.HostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "0642f951501c91bc78758b7cfeafbd31d7c3d3f3c564b16b0d7f84041ef166b6"
    },
    "67eeb51a2b7148b9c94853a63d669d570bfdc462b29de976f7b5cf5873300125": {
      "translations": {
        "python": {
          "source": "patterns.HttpsRedirect(self, \"Redirect\",\n    record_names=[\"foo.example.com\"],\n    target_domain=\"bar.example.com\",\n    zone=route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n        hosted_zone_id=\"ID\",\n        zone_name=\"example.com\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new HttpsRedirect(this, \"Redirect\", new HttpsRedirectProps {\n    RecordNames = new [] { \"foo.example.com\" },\n    TargetDomain = \"bar.example.com\",\n    Zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n        HostedZoneId = \"ID\",\n        ZoneName = \"example.com\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpsRedirect.Builder.create(this, \"Redirect\")\n        .recordNames(List.of(\"foo.example.com\"))\n        .targetDomain(\"bar.example.com\")\n        .zone(HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n                .hostedZoneId(\"ID\")\n                .zoneName(\"example.com\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "patterns.NewHttpsRedirect(this, jsii.String(\"Redirect\"), &httpsRedirectProps{\n\trecordNames: []*string{\n\t\tjsii.String(\"foo.example.com\"),\n\t},\n\ttargetDomain: jsii.String(\"bar.example.com\"),\n\tzone: route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"HostedZone\"), &hostedZoneAttributes{\n\t\thostedZoneId: jsii.String(\"ID\"),\n\t\tzoneName: jsii.String(\"example.com\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new patterns.HttpsRedirect(this, 'Redirect', {\n  recordNames: ['foo.example.com'],\n  targetDomain: 'bar.example.com',\n  zone: route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {\n    hostedZoneId: 'ID',\n    zoneName: 'example.com',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZoneAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-patterns.HttpsRedirect",
        "@aws-cdk/aws-route53-patterns.HttpsRedirectProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as patterns from '@aws-cdk/aws-route53-patterns';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew patterns.HttpsRedirect(this, 'Redirect', {\n  recordNames: ['foo.example.com'],\n  targetDomain: 'bar.example.com',\n  zone: route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {\n    hostedZoneId: 'ID',\n    zoneName: 'example.com',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "1bf364a1d791e9a4fc242a3fe226da2ceec8fe3177bd22fea5c25f6be7c10101"
    },
    "36efdf5727823bfd0f2e4e33b66e26f954fe65da79c6fcc9a240c6d4ffa408a2": {
      "translations": {
        "python": {
          "source": "hosted_zone = route53.HostedZone(self, \"MyHostedZone\", zone_name=\"example.org\")\nmetric = cloudwatch.Metric(\n    namespace=\"AWS/Route53\",\n    metric_name=\"DNSQueries\",\n    dimensions_map={\n        \"HostedZoneId\": hosted_zone.hosted_zone_id\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone hostedZone = new HostedZone(this, \"MyHostedZone\", new HostedZoneProps { ZoneName = \"example.org\" });\nMetric metric = new Metric(new MetricProps {\n    Namespace = \"AWS/Route53\",\n    MetricName = \"DNSQueries\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"HostedZoneId\", hostedZone.HostedZoneId }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone hostedZone = HostedZone.Builder.create(this, \"MyHostedZone\").zoneName(\"example.org\").build();\nMetric metric = Metric.Builder.create()\n        .namespace(\"AWS/Route53\")\n        .metricName(\"DNSQueries\")\n        .dimensionsMap(Map.of(\n                \"HostedZoneId\", hostedZone.getHostedZoneId()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "hostedZone := route53.NewHostedZone(this, jsii.String(\"MyHostedZone\"), &hostedZoneProps{\n\tzoneName: jsii.String(\"example.org\"),\n})\nmetric := cloudwatch.NewMetric(&metricProps{\n\tnamespace: jsii.String(\"AWS/Route53\"),\n\tmetricName: jsii.String(\"DNSQueries\"),\n\tdimensionsMap: map[string]*string{\n\t\t\"HostedZoneId\": hostedZone.hostedZoneId,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#hostedZoneId",
        "@aws-cdk/aws-route53.HostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "0642f951501c91bc78758b7cfeafbd31d7c3d3f3c564b16b0d7f84041ef166b6"
    },
    "1322f3a73b59e57cd09d5444d149ac651dd693fce86ef206bdcebe3669d98867": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\n\n\nrecord_name = \"www\"\ndomain_name = \"example.com\"\n\nbucket_website = s3.Bucket(self, \"BucketWebsite\",\n    bucket_name=[record_name, domain_name].join(\".\"),  # www.example.com\n    public_read_access=True,\n    website_index_document=\"index.html\"\n)\n\nzone = route53.HostedZone.from_lookup(self, \"Zone\", domain_name=domain_name) # example.com\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    record_name=record_name,  # www\n    target=route53.RecordTarget.from_alias(targets.BucketWebsiteTarget(bucket_website))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\n\n\nstring recordName = \"www\";\nstring domainName = \"example.com\";\n\nBucket bucketWebsite = new Bucket(this, \"BucketWebsite\", new BucketProps {\n    BucketName = new [] { recordName, domainName }.Join(\".\"),  // www.example.com\n    PublicReadAccess = true,\n    WebsiteIndexDocument = \"index.html\"\n});\n\nIHostedZone zone = HostedZone.FromLookup(this, \"Zone\", new HostedZoneProviderProps { DomainName = domainName }); // example.com\n\n // example.com\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    RecordName = recordName,  // www\n    Target = RecordTarget.FromAlias(new BucketWebsiteTarget(bucketWebsite))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\n\n\nString recordName = \"www\";\nString domainName = \"example.com\";\n\nBucket bucketWebsite = Bucket.Builder.create(this, \"BucketWebsite\")\n        .bucketName(List.of(recordName, domainName).join(\".\")) // www.example.com\n        .publicReadAccess(true)\n        .websiteIndexDocument(\"index.html\")\n        .build();\n\nIHostedZone zone = HostedZone.fromLookup(this, \"Zone\", HostedZoneProviderProps.builder().domainName(domainName).build()); // example.com\n\n // example.com\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .recordName(recordName) // www\n        .target(RecordTarget.fromAlias(new BucketWebsiteTarget(bucketWebsite)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import s3 \"github.com/aws-samples/dummy/awscdkawss3\"\n\nrecordName := \"www\"\ndomainName := \"example.com\"\n\nbucketWebsite := s3.NewBucket(this, jsii.String(\"BucketWebsite\"), &bucketProps{\n\tbucketName: []*string{\n\t\trecordName,\n\t\tdomainName,\n\t}.join(jsii.String(\".\")),\n\t // www.example.com\n\tpublicReadAccess: jsii.Boolean(true),\n\twebsiteIndexDocument: jsii.String(\"index.html\"),\n})\n\nzone := route53.hostedZone.fromLookup(this, jsii.String(\"Zone\"), &hostedZoneProviderProps{\n\tdomainName: jsii.String(domainName),\n}) // example.com\n\n // example.com\nroute53.NewARecord(this, jsii.String(\"AliasRecord\"), &aRecordProps{\n\tzone: zone,\n\trecordName: jsii.String(recordName),\n\t // www\n\ttarget: route53.recordTarget.fromAlias(targets.NewBucketWebsiteTarget(bucketWebsite)),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZoneProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.BucketWebsiteTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "9ab1b7cfb9d66f553ae3865ae3ea0d7277134dc7d3a0ef261cbfa60212ada3f6"
    },
    "0e998bb4aaeff5b906f6397b557de3063f6c5d297732a8cf2006b8b26e7e0812": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\nmx_record = route53.MxRecord(self, \"MyMxRecord\",\n    values=[route53.MxRecordValue(\n        host_name=\"hostName\",\n        priority=123\n    )],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nMxRecord mxRecord = new MxRecord(this, \"MyMxRecord\", new MxRecordProps {\n    Values = new [] { new MxRecordValue {\n        HostName = \"hostName\",\n        Priority = 123\n    } },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nMxRecord mxRecord = MxRecord.Builder.create(this, \"MyMxRecord\")\n        .values(List.of(MxRecordValue.builder()\n                .hostName(\"hostName\")\n                .priority(123)\n                .build()))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nmxRecord := route53.NewMxRecord(this, jsii.String(\"MyMxRecord\"), &mxRecordProps{\n\tvalues: []mxRecordValue{\n\t\t&mxRecordValue{\n\t\t\thostName: jsii.String(\"hostName\"),\n\t\t\tpriority: jsii.Number(123),\n\t\t},\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst mxRecord = new route53.MxRecord(this, 'MyMxRecord', {\n  values: [{\n    hostName: 'hostName',\n    priority: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.MxRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.MxRecord",
        "@aws-cdk/aws-route53.MxRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mxRecord = new route53.MxRecord(this, 'MyMxRecord', {\n  values: [{\n    hostName: 'hostName',\n    priority: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "77f5950eb06bde71c97ea00256dd8a7061ebe72741b0210f1c222f4489290fb1"
    },
    "68bbd84da829d6aa6827f063f4993e0e92551f6b1133dfd22b145500aedfa087": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\nmx_record_props = route53.MxRecordProps(\n    values=[route53.MxRecordValue(\n        host_name=\"hostName\",\n        priority=123\n    )],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nMxRecordProps mxRecordProps = new MxRecordProps {\n    Values = new [] { new MxRecordValue {\n        HostName = \"hostName\",\n        Priority = 123\n    } },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nMxRecordProps mxRecordProps = MxRecordProps.builder()\n        .values(List.of(MxRecordValue.builder()\n                .hostName(\"hostName\")\n                .priority(123)\n                .build()))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nmxRecordProps := &mxRecordProps{\n\tvalues: []mxRecordValue{\n\t\t&mxRecordValue{\n\t\t\thostName: jsii.String(\"hostName\"),\n\t\t\tpriority: jsii.Number(123),\n\t\t},\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst mxRecordProps: route53.MxRecordProps = {\n  values: [{\n    hostName: 'hostName',\n    priority: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.MxRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.MxRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mxRecordProps: route53.MxRecordProps = {\n  values: [{\n    hostName: 'hostName',\n    priority: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 19,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "3984fe414c2ebe34344be1b60c22b4a8d571d88db71e07451242d879cf66c80f"
    },
    "0578e256e13f0934b0073874daa731f6b0257b7330976cbcece739fc7f709aea": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nmx_record_value = route53.MxRecordValue(\n    host_name=\"hostName\",\n    priority=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nMxRecordValue mxRecordValue = new MxRecordValue {\n    HostName = \"hostName\",\n    Priority = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nMxRecordValue mxRecordValue = MxRecordValue.builder()\n        .hostName(\"hostName\")\n        .priority(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nmxRecordValue := &mxRecordValue{\n\thostName: jsii.String(\"hostName\"),\n\tpriority: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst mxRecordValue: route53.MxRecordValue = {\n  hostName: 'hostName',\n  priority: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.MxRecordValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.MxRecordValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mxRecordValue: route53.MxRecordValue = {\n  hostName: 'hostName',\n  priority: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5b1c4f81c3889ac164de4b78e1a0bda7c082a1e1171f2a9b25d10f01ad68c7f2"
    },
    "b985e48fa351fb2feabfd99ca2a358b7abeea011bb6de094bd191137f7339cfc": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.NsRecord(self, \"NSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew NsRecord(this, \"NSRecord\", new NsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nNsRecord.Builder.create(this, \"NSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewNsRecord(this, jsii.String(\"NSRecord\"), &nsRecordProps{\n\tzone: myZone,\n\trecordName: jsii.String(\"foo\"),\n\tvalues: []*string{\n\t\tjsii.String(\"ns-1.awsdns.co.uk.\"),\n\t\tjsii.String(\"ns-2.awsdns.com.\"),\n\t},\n\tttl: duration.minutes(jsii.Number(90)),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.NsRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.NsRecord",
        "@aws-cdk/aws-route53.NsRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7ab2a5ca45b8a7458f283ba402891e156091588aa4222d162fa817e5cd039629"
    },
    "ff248824caf38e61437ba55b1e8804bd9bc41b9911ca32b11f0dafb286348ff5": {
      "translations": {
        "python": {
          "source": "# my_zone: route53.HostedZone\n\n\nroute53.NsRecord(self, \"NSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew NsRecord(this, \"NSRecord\", new NsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nNsRecord.Builder.create(this, \"NSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myZone hostedZone\n\nroute53.NewNsRecord(this, jsii.String(\"NSRecord\"), &nsRecordProps{\n\tzone: myZone,\n\trecordName: jsii.String(\"foo\"),\n\tvalues: []*string{\n\t\tjsii.String(\"ns-1.awsdns.co.uk.\"),\n\t\tjsii.String(\"ns-2.awsdns.com.\"),\n\t},\n\tttl: duration.minutes(jsii.Number(90)),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.NsRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.NsRecord",
        "@aws-cdk/aws-route53.NsRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7ab2a5ca45b8a7458f283ba402891e156091588aa4222d162fa817e5cd039629"
    },
    "e162e1e0485169bb91c7c51b96bac5353a94d93281a655f9e001044e2808ca89": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nzone = route53.PrivateHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\",\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = new PrivateHostedZone(this, \"HostedZone\", new PrivateHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = PrivateHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nzone := route53.NewPrivateHostedZone(this, jsii.String(\"HostedZone\"), &privateHostedZoneProps{\n\tzoneName: jsii.String(\"fully.qualified.domain.com\"),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PrivateHostedZone"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-route53.PrivateHostedZone",
        "@aws-cdk/aws-route53.PrivateHostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a86dc9cd1e6760178afa364f0c0546f7083074892c67c0b15a0d3a86a4b160a3"
    },
    "747890b930cf0c1af48ba22cdbcf51a6df27219d186aeb983c2451a0f521f964": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nzone = route53.PrivateHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\",\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = new PrivateHostedZone(this, \"HostedZone\", new PrivateHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = PrivateHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nzone := route53.NewPrivateHostedZone(this, jsii.String(\"HostedZone\"), &privateHostedZoneProps{\n\tzoneName: jsii.String(\"fully.qualified.domain.com\"),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PrivateHostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-route53.PrivateHostedZone",
        "@aws-cdk/aws-route53.PrivateHostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a86dc9cd1e6760178afa364f0c0546f7083074892c67c0b15a0d3a86a4b160a3"
    },
    "891576970f66d352bdd54585ba852e024e86393b14abb4944a9ecffec524c838": {
      "translations": {
        "python": {
          "source": "parent_zone = route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"someexample.com\",\n    cross_account_zone_delegation_principal=iam.AccountPrincipal(\"12345678901\"),\n    cross_account_zone_delegation_role_name=\"MyDelegationRole\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PublicHostedZone parentZone = new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"someexample.com\",\n    CrossAccountZoneDelegationPrincipal = new AccountPrincipal(\"12345678901\"),\n    CrossAccountZoneDelegationRoleName = \"MyDelegationRole\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone parentZone = PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"someexample.com\")\n        .crossAccountZoneDelegationPrincipal(new AccountPrincipal(\"12345678901\"))\n        .crossAccountZoneDelegationRoleName(\"MyDelegationRole\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "parentZone := route53.NewPublicHostedZone(this, jsii.String(\"HostedZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"someexample.com\"),\n\tcrossAccountZoneDelegationPrincipal: iam.NewAccountPrincipal(jsii.String(\"12345678901\")),\n\tcrossAccountZoneDelegationRoleName: jsii.String(\"MyDelegationRole\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PublicHostedZone"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "cb7bcbb1f5393547e7a5b673c239eae6e5f187abe0a54179527b7752be8d2f53"
    },
    "5ac1c3390f44911cfb8beb681961b9f453c4d2f0e125a9f035f105d133a7c14f": {
      "translations": {
        "python": {
          "source": "parent_zone = route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"someexample.com\",\n    cross_account_zone_delegation_principal=iam.AccountPrincipal(\"12345678901\"),\n    cross_account_zone_delegation_role_name=\"MyDelegationRole\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PublicHostedZone parentZone = new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"someexample.com\",\n    CrossAccountZoneDelegationPrincipal = new AccountPrincipal(\"12345678901\"),\n    CrossAccountZoneDelegationRoleName = \"MyDelegationRole\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone parentZone = PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"someexample.com\")\n        .crossAccountZoneDelegationPrincipal(new AccountPrincipal(\"12345678901\"))\n        .crossAccountZoneDelegationRoleName(\"MyDelegationRole\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "parentZone := route53.NewPublicHostedZone(this, jsii.String(\"HostedZone\"), &publicHostedZoneProps{\n\tzoneName: jsii.String(\"someexample.com\"),\n\tcrossAccountZoneDelegationPrincipal: iam.NewAccountPrincipal(jsii.String(\"12345678901\")),\n\tcrossAccountZoneDelegationRoleName: jsii.String(\"MyDelegationRole\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PublicHostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "cb7bcbb1f5393547e7a5b673c239eae6e5f187abe0a54179527b7752be8d2f53"
    },
    "7676af1dc51f2ec7603fb36bae81afc0361fcd2b62725bd135a66d3f777518f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n# record_target: route53.RecordTarget\n\nrecord_set = route53.RecordSet(self, \"MyRecordSet\",\n    record_type=route53.RecordType.A,\n    target=record_target,\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nRecordTarget recordTarget;\nRecordSet recordSet = new RecordSet(this, \"MyRecordSet\", new RecordSetProps {\n    RecordType = RecordType.A,\n    Target = recordTarget,\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\nRecordTarget recordTarget;\n\nRecordSet recordSet = RecordSet.Builder.create(this, \"MyRecordSet\")\n        .recordType(RecordType.A)\n        .target(recordTarget)\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nvar recordTarget recordTarget\nrecordSet := route53.NewRecordSet(this, jsii.String(\"MyRecordSet\"), &recordSetProps{\n\trecordType: route53.recordType_A,\n\ttarget: recordTarget,\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\ndeclare const recordTarget: route53.RecordTarget;\nconst recordSet = new route53.RecordSet(this, 'MyRecordSet', {\n  recordType: route53.RecordType.A,\n  target: recordTarget,\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.RecordSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordSet",
        "@aws-cdk/aws-route53.RecordSetProps",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordType",
        "@aws-cdk/aws-route53.RecordType#A",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\ndeclare const recordTarget: route53.RecordTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst recordSet = new route53.RecordSet(this, 'MyRecordSet', {\n  recordType: route53.RecordType.A,\n  target: recordTarget,\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c51c092b722bdc2c99f28ece448cd382d2a23e293e89c04aeb4b06c7cc3119fd"
    },
    "d175d81db19fcf65012639bfda41bade82580ca40faa44b91cc668479e6f698e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\nrecord_set_options = route53.RecordSetOptions(\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nRecordSetOptions recordSetOptions = new RecordSetOptions {\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nRecordSetOptions recordSetOptions = RecordSetOptions.builder()\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nrecordSetOptions := &recordSetOptions{\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst recordSetOptions: route53.RecordSetOptions = {\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.RecordSetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordSetOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst recordSetOptions: route53.RecordSetOptions = {\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d99ccf1302af72ef50e482e9b28f01729240123edecf8ee2840cb3d5dab3717b"
    },
    "c7d86ada7b457ccce7993b7de0e447f3f2f6e093e8d671d6a255efe3b1496031": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n# record_target: route53.RecordTarget\n\nrecord_set_props = route53.RecordSetProps(\n    record_type=route53.RecordType.A,\n    target=record_target,\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nRecordTarget recordTarget;\nRecordSetProps recordSetProps = new RecordSetProps {\n    RecordType = RecordType.A,\n    Target = recordTarget,\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\nRecordTarget recordTarget;\n\nRecordSetProps recordSetProps = RecordSetProps.builder()\n        .recordType(RecordType.A)\n        .target(recordTarget)\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nvar recordTarget recordTarget\nrecordSetProps := &recordSetProps{\n\trecordType: route53.recordType_A,\n\ttarget: recordTarget,\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\ndeclare const recordTarget: route53.RecordTarget;\nconst recordSetProps: route53.RecordSetProps = {\n  recordType: route53.RecordType.A,\n  target: recordTarget,\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.RecordSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordSetProps",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordType",
        "@aws-cdk/aws-route53.RecordType#A",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\ndeclare const recordTarget: route53.RecordTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst recordSetProps: route53.RecordSetProps = {\n  recordType: route53.RecordType.A,\n  target: recordTarget,\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 25,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 4,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "29ca004e57f455de71902a41c5818f4f65ae4866f53c975e415d90cceb72557b"
    },
    "6e23a9e4620d41debc278be69838198a56b8f2c09626693121f19ad901233312": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone: route53.HostedZone\n# distribution: cloudfront.CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudfront \"github.com/aws-samples/dummy/awscdkawscloudfront\"\n\nvar myZone hostedZone\nvar distribution cloudFrontWebDistribution\nroute53.NewAaaaRecord(this, jsii.String(\"Alias\"), &aaaaRecordProps{\n\tzone: myZone,\n\ttarget: route53.recordTarget.fromAlias(targets.NewCloudFrontTarget(distribution)),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.RecordTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "54a1d19e1434eb20d679c0e1389d9a0f23ff87681b33b82d6dece4ce55f37a46"
    },
    "6c9f0b04a83ff6b1802179524d2e67c8946892ce45e7cdd4889b38b7cb112fbb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\nsrv_record = route53.SrvRecord(self, \"MySrvRecord\",\n    values=[route53.SrvRecordValue(\n        host_name=\"hostName\",\n        port=123,\n        priority=123,\n        weight=123\n    )],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nSrvRecord srvRecord = new SrvRecord(this, \"MySrvRecord\", new SrvRecordProps {\n    Values = new [] { new SrvRecordValue {\n        HostName = \"hostName\",\n        Port = 123,\n        Priority = 123,\n        Weight = 123\n    } },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nSrvRecord srvRecord = SrvRecord.Builder.create(this, \"MySrvRecord\")\n        .values(List.of(SrvRecordValue.builder()\n                .hostName(\"hostName\")\n                .port(123)\n                .priority(123)\n                .weight(123)\n                .build()))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nsrvRecord := route53.NewSrvRecord(this, jsii.String(\"MySrvRecord\"), &srvRecordProps{\n\tvalues: []srvRecordValue{\n\t\t&srvRecordValue{\n\t\t\thostName: jsii.String(\"hostName\"),\n\t\t\tport: jsii.Number(123),\n\t\t\tpriority: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst srvRecord = new route53.SrvRecord(this, 'MySrvRecord', {\n  values: [{\n    hostName: 'hostName',\n    port: 123,\n    priority: 123,\n    weight: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.SrvRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.SrvRecord",
        "@aws-cdk/aws-route53.SrvRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst srvRecord = new route53.SrvRecord(this, 'MySrvRecord', {\n  values: [{\n    hostName: 'hostName',\n    port: 123,\n    priority: 123,\n    weight: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "4d80fd5f3e541accbfb53381f363b58889120b8172fdd5ed09db81528a79b55a"
    },
    "58b3ac5279f8556b678dcf9f2d242f9fb74d4f1051ae30ff56083b3efd48ea73": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\nsrv_record_props = route53.SrvRecordProps(\n    values=[route53.SrvRecordValue(\n        host_name=\"hostName\",\n        port=123,\n        priority=123,\n        weight=123\n    )],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nSrvRecordProps srvRecordProps = new SrvRecordProps {\n    Values = new [] { new SrvRecordValue {\n        HostName = \"hostName\",\n        Port = 123,\n        Priority = 123,\n        Weight = 123\n    } },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nSrvRecordProps srvRecordProps = SrvRecordProps.builder()\n        .values(List.of(SrvRecordValue.builder()\n                .hostName(\"hostName\")\n                .port(123)\n                .priority(123)\n                .weight(123)\n                .build()))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nsrvRecordProps := &srvRecordProps{\n\tvalues: []srvRecordValue{\n\t\t&srvRecordValue{\n\t\t\thostName: jsii.String(\"hostName\"),\n\t\t\tport: jsii.Number(123),\n\t\t\tpriority: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst srvRecordProps: route53.SrvRecordProps = {\n  values: [{\n    hostName: 'hostName',\n    port: 123,\n    priority: 123,\n    weight: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.SrvRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.SrvRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst srvRecordProps: route53.SrvRecordProps = {\n  values: [{\n    hostName: 'hostName',\n    port: 123,\n    priority: 123,\n    weight: 123,\n  }],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 21,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "4f0131c6e0395e6e94afc8447f41138ce760b6e59ed70ad6b6133f743a5962f3"
    },
    "295804277a2087181b15c7bb20f4e49d7ba791a73ec50383eabb7b998d2b434c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\n\nsrv_record_value = route53.SrvRecordValue(\n    host_name=\"hostName\",\n    port=123,\n    priority=123,\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\n\nSrvRecordValue srvRecordValue = new SrvRecordValue {\n    HostName = \"hostName\",\n    Port = 123,\n    Priority = 123,\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\n\nSrvRecordValue srvRecordValue = SrvRecordValue.builder()\n        .hostName(\"hostName\")\n        .port(123)\n        .priority(123)\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\nsrvRecordValue := &srvRecordValue{\n\thostName: jsii.String(\"hostName\"),\n\tport: jsii.Number(123),\n\tpriority: jsii.Number(123),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nconst srvRecordValue: route53.SrvRecordValue = {\n  hostName: 'hostName',\n  port: 123,\n  priority: 123,\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.SrvRecordValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.SrvRecordValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst srvRecordValue: route53.SrvRecordValue = {\n  hostName: 'hostName',\n  port: 123,\n  priority: 123,\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0eb3a69124c5e8591544cd22e01bb9396019798e4b3ef0519be6c0fa7a3e1875"
    },
    "d3db2b108eec66769fdddd437e2d7049f87d2b99b0124b248cba9b84d2151e57": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_route53 as route53\n\n# zone: route53.HostedZone\n\n\nverify_domain_identity = cr.AwsCustomResource(self, \"VerifyDomainIdentity\",\n    on_create=cr.AwsSdkCall(\n        service=\"SES\",\n        action=\"verifyDomainIdentity\",\n        parameters={\n            \"Domain\": \"example.com\"\n        },\n        physical_resource_id=cr.PhysicalResourceId.from_response(\"VerificationToken\")\n    ),\n    policy=cr.AwsCustomResourcePolicy.from_sdk_calls(\n        resources=cr.AwsCustomResourcePolicy.ANY_RESOURCE\n    )\n)\nroute53.TxtRecord(self, \"SESVerificationRecord\",\n    zone=zone,\n    record_name=\"_amazonses.example.com\",\n    values=[verify_domain_identity.get_response_field(\"VerificationToken\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\n\nHostedZone zone;\n\n\nAwsCustomResource verifyDomainIdentity = new AwsCustomResource(this, \"VerifyDomainIdentity\", new AwsCustomResourceProps {\n    OnCreate = new AwsSdkCall {\n        Service = \"SES\",\n        Action = \"verifyDomainIdentity\",\n        Parameters = new Dictionary<string, string> {\n            { \"Domain\", \"example.com\" }\n        },\n        PhysicalResourceId = PhysicalResourceId.FromResponse(\"VerificationToken\")\n    },\n    Policy = AwsCustomResourcePolicy.FromSdkCalls(new SdkCallsPolicyOptions {\n        Resources = AwsCustomResourcePolicy.ANY_RESOURCE\n    })\n});\nnew TxtRecord(this, \"SESVerificationRecord\", new TxtRecordProps {\n    Zone = zone,\n    RecordName = \"_amazonses.example.com\",\n    Values = new [] { verifyDomainIdentity.GetResponseField(\"VerificationToken\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.*;\n\nHostedZone zone;\n\n\nAwsCustomResource verifyDomainIdentity = AwsCustomResource.Builder.create(this, \"VerifyDomainIdentity\")\n        .onCreate(AwsSdkCall.builder()\n                .service(\"SES\")\n                .action(\"verifyDomainIdentity\")\n                .parameters(Map.of(\n                        \"Domain\", \"example.com\"))\n                .physicalResourceId(PhysicalResourceId.fromResponse(\"VerificationToken\"))\n                .build())\n        .policy(AwsCustomResourcePolicy.fromSdkCalls(SdkCallsPolicyOptions.builder()\n                .resources(AwsCustomResourcePolicy.ANY_RESOURCE)\n                .build()))\n        .build();\nTxtRecord.Builder.create(this, \"SESVerificationRecord\")\n        .zone(zone)\n        .recordName(\"_amazonses.example.com\")\n        .values(List.of(verifyDomainIdentity.getResponseField(\"VerificationToken\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\nvar zone hostedZone\n\nverifyDomainIdentity := cr.NewAwsCustomResource(this, jsii.String(\"VerifyDomainIdentity\"), &awsCustomResourceProps{\n\tonCreate: &awsSdkCall{\n\t\tservice: jsii.String(\"SES\"),\n\t\taction: jsii.String(\"verifyDomainIdentity\"),\n\t\tparameters: map[string]*string{\n\t\t\t\"Domain\": jsii.String(\"example.com\"),\n\t\t},\n\t\tphysicalResourceId: cr.physicalResourceId.fromResponse(jsii.String(\"VerificationToken\")),\n\t},\n\tpolicy: cr.awsCustomResourcePolicy.fromSdkCalls(&sdkCallsPolicyOptions{\n\t\tresources: cr.*awsCustomResourcePolicy_ANY_RESOURCE(),\n\t}),\n})\nroute53.NewTxtRecord(this, jsii.String(\"SESVerificationRecord\"), &txtRecordProps{\n\tzone: zone,\n\trecordName: jsii.String(\"_amazonses.example.com\"),\n\tvalues: []*string{\n\t\tverifyDomainIdentity.getResponseField(jsii.String(\"VerificationToken\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as route53 from '@aws-cdk/aws-route53';\n\nconst verifyDomainIdentity = new cr.AwsCustomResource(this, 'VerifyDomainIdentity', {\n  onCreate: {\n    service: 'SES',\n    action: 'verifyDomainIdentity',\n    parameters: {\n      Domain: 'example.com',\n    },\n    physicalResourceId: cr.PhysicalResourceId.fromResponse('VerificationToken'), // Use the token returned by the call as physical id\n  },\n  policy: cr.AwsCustomResourcePolicy.fromSdkCalls({\n    resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE,\n  }),\n});\n\ndeclare const zone: route53.HostedZone;\nnew route53.TxtRecord(this, 'SESVerificationRecord', {\n  zone,\n  recordName: `_amazonses.example.com`,\n  values: [verifyDomainIdentity.getResponseField('VerificationToken')],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.TxtRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.TxtRecord",
        "@aws-cdk/aws-route53.TxtRecordProps",
        "@aws-cdk/custom-resources.AwsCustomResource",
        "@aws-cdk/custom-resources.AwsCustomResource#getResponseField",
        "@aws-cdk/custom-resources.AwsCustomResourcePolicy",
        "@aws-cdk/custom-resources.AwsCustomResourcePolicy#ANY_RESOURCE",
        "@aws-cdk/custom-resources.AwsCustomResourcePolicy#fromSdkCalls",
        "@aws-cdk/custom-resources.AwsCustomResourceProps",
        "@aws-cdk/custom-resources.AwsSdkCall",
        "@aws-cdk/custom-resources.PhysicalResourceId",
        "@aws-cdk/custom-resources.PhysicalResourceId#fromResponse",
        "@aws-cdk/custom-resources.SdkCallsPolicyOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const zone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CustomResource, Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cr from '@aws-cdk/custom-resources';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst verifyDomainIdentity = new cr.AwsCustomResource(this, 'VerifyDomainIdentity', {\n  onCreate: {\n    service: 'SES',\n    action: 'verifyDomainIdentity',\n    parameters: {\n      Domain: 'example.com',\n    },\n    physicalResourceId: cr.PhysicalResourceId.fromResponse('VerificationToken'), // Use the token returned by the call as physical id\n  },\n  policy: cr.AwsCustomResourcePolicy.fromSdkCalls({\n    resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE,\n  }),\n});\nnew route53.TxtRecord(this, 'SESVerificationRecord', {\n  zone,\n  recordName: `_amazonses.example.com`,\n  values: [verifyDomainIdentity.getResponseField('VerificationToken')],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 1,
        "75": 31,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "71e918d1fc4f4d70b3114eacd5021d1f6f3aee42ddd5bf9a220dd138825a96b5"
    },
    "096d0f8eac2c3ecb01df9b6c6afca63db6d7a314d62a98c44590746926778b89": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_route53 as route53\n\n# zone: route53.HostedZone\n\n\nverify_domain_identity = cr.AwsCustomResource(self, \"VerifyDomainIdentity\",\n    on_create=cr.AwsSdkCall(\n        service=\"SES\",\n        action=\"verifyDomainIdentity\",\n        parameters={\n            \"Domain\": \"example.com\"\n        },\n        physical_resource_id=cr.PhysicalResourceId.from_response(\"VerificationToken\")\n    ),\n    policy=cr.AwsCustomResourcePolicy.from_sdk_calls(\n        resources=cr.AwsCustomResourcePolicy.ANY_RESOURCE\n    )\n)\nroute53.TxtRecord(self, \"SESVerificationRecord\",\n    zone=zone,\n    record_name=\"_amazonses.example.com\",\n    values=[verify_domain_identity.get_response_field(\"VerificationToken\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\n\nHostedZone zone;\n\n\nAwsCustomResource verifyDomainIdentity = new AwsCustomResource(this, \"VerifyDomainIdentity\", new AwsCustomResourceProps {\n    OnCreate = new AwsSdkCall {\n        Service = \"SES\",\n        Action = \"verifyDomainIdentity\",\n        Parameters = new Dictionary<string, string> {\n            { \"Domain\", \"example.com\" }\n        },\n        PhysicalResourceId = PhysicalResourceId.FromResponse(\"VerificationToken\")\n    },\n    Policy = AwsCustomResourcePolicy.FromSdkCalls(new SdkCallsPolicyOptions {\n        Resources = AwsCustomResourcePolicy.ANY_RESOURCE\n    })\n});\nnew TxtRecord(this, \"SESVerificationRecord\", new TxtRecordProps {\n    Zone = zone,\n    RecordName = \"_amazonses.example.com\",\n    Values = new [] { verifyDomainIdentity.GetResponseField(\"VerificationToken\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.*;\n\nHostedZone zone;\n\n\nAwsCustomResource verifyDomainIdentity = AwsCustomResource.Builder.create(this, \"VerifyDomainIdentity\")\n        .onCreate(AwsSdkCall.builder()\n                .service(\"SES\")\n                .action(\"verifyDomainIdentity\")\n                .parameters(Map.of(\n                        \"Domain\", \"example.com\"))\n                .physicalResourceId(PhysicalResourceId.fromResponse(\"VerificationToken\"))\n                .build())\n        .policy(AwsCustomResourcePolicy.fromSdkCalls(SdkCallsPolicyOptions.builder()\n                .resources(AwsCustomResourcePolicy.ANY_RESOURCE)\n                .build()))\n        .build();\nTxtRecord.Builder.create(this, \"SESVerificationRecord\")\n        .zone(zone)\n        .recordName(\"_amazonses.example.com\")\n        .values(List.of(verifyDomainIdentity.getResponseField(\"VerificationToken\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\nvar zone hostedZone\n\nverifyDomainIdentity := cr.NewAwsCustomResource(this, jsii.String(\"VerifyDomainIdentity\"), &awsCustomResourceProps{\n\tonCreate: &awsSdkCall{\n\t\tservice: jsii.String(\"SES\"),\n\t\taction: jsii.String(\"verifyDomainIdentity\"),\n\t\tparameters: map[string]*string{\n\t\t\t\"Domain\": jsii.String(\"example.com\"),\n\t\t},\n\t\tphysicalResourceId: cr.physicalResourceId.fromResponse(jsii.String(\"VerificationToken\")),\n\t},\n\tpolicy: cr.awsCustomResourcePolicy.fromSdkCalls(&sdkCallsPolicyOptions{\n\t\tresources: cr.*awsCustomResourcePolicy_ANY_RESOURCE(),\n\t}),\n})\nroute53.NewTxtRecord(this, jsii.String(\"SESVerificationRecord\"), &txtRecordProps{\n\tzone: zone,\n\trecordName: jsii.String(\"_amazonses.example.com\"),\n\tvalues: []*string{\n\t\tverifyDomainIdentity.getResponseField(jsii.String(\"VerificationToken\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as route53 from '@aws-cdk/aws-route53';\n\nconst verifyDomainIdentity = new cr.AwsCustomResource(this, 'VerifyDomainIdentity', {\n  onCreate: {\n    service: 'SES',\n    action: 'verifyDomainIdentity',\n    parameters: {\n      Domain: 'example.com',\n    },\n    physicalResourceId: cr.PhysicalResourceId.fromResponse('VerificationToken'), // Use the token returned by the call as physical id\n  },\n  policy: cr.AwsCustomResourcePolicy.fromSdkCalls({\n    resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE,\n  }),\n});\n\ndeclare const zone: route53.HostedZone;\nnew route53.TxtRecord(this, 'SESVerificationRecord', {\n  zone,\n  recordName: `_amazonses.example.com`,\n  values: [verifyDomainIdentity.getResponseField('VerificationToken')],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.TxtRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.TxtRecord",
        "@aws-cdk/aws-route53.TxtRecordProps",
        "@aws-cdk/custom-resources.AwsCustomResource",
        "@aws-cdk/custom-resources.AwsCustomResource#getResponseField",
        "@aws-cdk/custom-resources.AwsCustomResourcePolicy",
        "@aws-cdk/custom-resources.AwsCustomResourcePolicy#ANY_RESOURCE",
        "@aws-cdk/custom-resources.AwsCustomResourcePolicy#fromSdkCalls",
        "@aws-cdk/custom-resources.AwsCustomResourceProps",
        "@aws-cdk/custom-resources.AwsSdkCall",
        "@aws-cdk/custom-resources.PhysicalResourceId",
        "@aws-cdk/custom-resources.PhysicalResourceId#fromResponse",
        "@aws-cdk/custom-resources.SdkCallsPolicyOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const zone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CustomResource, Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cr from '@aws-cdk/custom-resources';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst verifyDomainIdentity = new cr.AwsCustomResource(this, 'VerifyDomainIdentity', {\n  onCreate: {\n    service: 'SES',\n    action: 'verifyDomainIdentity',\n    parameters: {\n      Domain: 'example.com',\n    },\n    physicalResourceId: cr.PhysicalResourceId.fromResponse('VerificationToken'), // Use the token returned by the call as physical id\n  },\n  policy: cr.AwsCustomResourcePolicy.fromSdkCalls({\n    resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE,\n  }),\n});\nnew route53.TxtRecord(this, 'SESVerificationRecord', {\n  zone,\n  recordName: `_amazonses.example.com`,\n  values: [verifyDomainIdentity.getResponseField('VerificationToken')],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 1,
        "75": 31,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "71e918d1fc4f4d70b3114eacd5021d1f6f3aee42ddd5bf9a220dd138825a96b5"
    },
    "1d0770bb01842df6619fbe2875e69d59bacaf4f327b1fa685a5452f9495dafbc": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone, VpcEndpointServiceDomainName\n# zone: HostedZone\n# vpces: ec2.VpcEndpointService\n\n\nVpcEndpointServiceDomainName(self, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nnew VpcEndpointServiceDomainName(this, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nVpcEndpointServiceDomainName.Builder.create(this, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawsroute53 \"github.com/aws-samples/dummy/awscdkawsroute53\"type HostedZone awscdkawsroute53.HostedZone\ntype VpcEndpointServiceDomainName awscdkawsroute53.VpcEndpointServiceDomainName\nvar zone hostedZone\nvar vpces vpcEndpointService\n\nNewVpcEndpointServiceDomainName(this, jsii.String(\"EndpointDomain\"), &vpcEndpointServiceDomainNameProps{\n\tendpointService: vpces,\n\tdomainName: jsii.String(\"my-stuff.aws-cdk.dev\"),\n\tpublicHostedZone: zone,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.VpcEndpointServiceDomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 1,
        "169": 2,
        "193": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d8326490a66b8c701c8e63c09475d9209dc6bdaebfbe2e49b367e6093611e413"
    },
    "762a5d83e6790ae34a1882a74a1a80b5535d00764e950d87a4a9399f4a7b4deb": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone, VpcEndpointServiceDomainName\n# zone: HostedZone\n# vpces: ec2.VpcEndpointService\n\n\nVpcEndpointServiceDomainName(self, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nnew VpcEndpointServiceDomainName(this, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nVpcEndpointServiceDomainName.Builder.create(this, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkawsroute53 \"github.com/aws-samples/dummy/awscdkawsroute53\"type HostedZone awscdkawsroute53.HostedZone\ntype VpcEndpointServiceDomainName awscdkawsroute53.VpcEndpointServiceDomainName\nvar zone hostedZone\nvar vpces vpcEndpointService\n\nNewVpcEndpointServiceDomainName(this, jsii.String(\"EndpointDomain\"), &vpcEndpointServiceDomainNameProps{\n\tendpointService: vpces,\n\tdomainName: jsii.String(\"my-stuff.aws-cdk.dev\"),\n\tpublicHostedZone: zone,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 1,
        "169": 2,
        "193": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d8326490a66b8c701c8e63c09475d9209dc6bdaebfbe2e49b367e6093611e413"
    },
    "66bd2777d580c9a9702cca8aa1c10520412666404f5aa54802c136caf43175cb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\nzone_delegation_options = route53.ZoneDelegationOptions(\n    comment=\"comment\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\nZoneDelegationOptions zoneDelegationOptions = new ZoneDelegationOptions {\n    Comment = \"comment\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nZoneDelegationOptions zoneDelegationOptions = ZoneDelegationOptions.builder()\n        .comment(\"comment\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nzoneDelegationOptions := &zoneDelegationOptions{\n\tcomment: jsii.String(\"comment\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\nconst zoneDelegationOptions: route53.ZoneDelegationOptions = {\n  comment: 'comment',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.ZoneDelegationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.ZoneDelegationOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst zoneDelegationOptions: route53.ZoneDelegationOptions = {\n  comment: 'comment',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9a2717be0ba50b2a844fe932eb75371a13f4e6492d25c1751fe57c8bc7ce2b2f"
    },
    "611e13713066eaa5c32dd0e0b1ee7cb84625fec5b4a61e54b652a634da21da77": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\nzone_delegation_record = route53.ZoneDelegationRecord(self, \"MyZoneDelegationRecord\",\n    name_servers=[\"nameServers\"],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nZoneDelegationRecord zoneDelegationRecord = new ZoneDelegationRecord(this, \"MyZoneDelegationRecord\", new ZoneDelegationRecordProps {\n    NameServers = new [] { \"nameServers\" },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nZoneDelegationRecord zoneDelegationRecord = ZoneDelegationRecord.Builder.create(this, \"MyZoneDelegationRecord\")\n        .nameServers(List.of(\"nameServers\"))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nzoneDelegationRecord := route53.NewZoneDelegationRecord(this, jsii.String(\"MyZoneDelegationRecord\"), &zoneDelegationRecordProps{\n\tnameServers: []*string{\n\t\tjsii.String(\"nameServers\"),\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst zoneDelegationRecord = new route53.ZoneDelegationRecord(this, 'MyZoneDelegationRecord', {\n  nameServers: ['nameServers'],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.ZoneDelegationRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.ZoneDelegationRecord",
        "@aws-cdk/aws-route53.ZoneDelegationRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst zoneDelegationRecord = new route53.ZoneDelegationRecord(this, 'MyZoneDelegationRecord', {\n  nameServers: ['nameServers'],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f6962ffe73994742da705fdc2af69b09bc7495d60e0789295f263e2cfafab272"
    },
    "e0b7e91792269498ebc4e39c27a9e1f9d73196081fdf079c5fd6ab260d0b3dae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.core as cdk\n\n# hosted_zone: route53.HostedZone\n\nzone_delegation_record_props = route53.ZoneDelegationRecordProps(\n    name_servers=[\"nameServers\"],\n    zone=hosted_zone,\n\n    # the properties below are optional\n    comment=\"comment\",\n    record_name=\"recordName\",\n    ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK;\n\nHostedZone hostedZone;\nZoneDelegationRecordProps zoneDelegationRecordProps = new ZoneDelegationRecordProps {\n    NameServers = new [] { \"nameServers\" },\n    Zone = hostedZone,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    RecordName = \"recordName\",\n    Ttl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.core.*;\n\nHostedZone hostedZone;\n\nZoneDelegationRecordProps zoneDelegationRecordProps = ZoneDelegationRecordProps.builder()\n        .nameServers(List.of(\"nameServers\"))\n        .zone(hostedZone)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .recordName(\"recordName\")\n        .ttl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar hostedZone hostedZone\nzoneDelegationRecordProps := &zoneDelegationRecordProps{\n\tnameServers: []*string{\n\t\tjsii.String(\"nameServers\"),\n\t},\n\tzone: hostedZone,\n\n\t// the properties below are optional\n\tcomment: jsii.String(\"comment\"),\n\trecordName: jsii.String(\"recordName\"),\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\nconst zoneDelegationRecordProps: route53.ZoneDelegationRecordProps = {\n  nameServers: ['nameServers'],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.ZoneDelegationRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.ZoneDelegationRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst zoneDelegationRecordProps: route53.ZoneDelegationRecordProps = {\n  nameServers: ['nameServers'],\n  zone: hostedZone,\n\n  // the properties below are optional\n  comment: 'comment',\n  recordName: 'recordName',\n  ttl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 17,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "5020f09c372b7a08399cf4c49105108340ee16908b8615ed1458f76d8c8fe3aa"
    }
  }
}
